(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"/02+":function(e,t){e.exports='const Link = ({ id, children, title }) => (\n  <OverlayTrigger overlay={<Tooltip id={id}>{title}</Tooltip>}>\n    <a href="#">{children}</a>\n  </OverlayTrigger>\n);\n\nrender(\n  <p>\n    Tight pants next level keffiyeh{\' \'}\n    <Link title="Default title" id="t-1">\n      you probably\n    </Link>{\' \'}\n    haven\'t heard of them. Farm-to-table seitan, mcsweeney\'s fixie sustainable\n    quinoa 8-bit american apparel{\' \'}\n    <Link id="t-2" title="Another one">\n      have a\n    </Link>{\' \'}\n    terry richardson vinyl chambray. Beard stumptown, cardigans banh mi lomo\n    thundercats. Tofu biodiesel williamsburg marfa, four loko mcsweeney\'s\n    cleanse vegan chambray. A really ironic artisan{\' \'}\n    <Link title="Another one here too" id="t-3">\n      whatever keytar\n    </Link>\n    , scenester farm-to-table banksy Austin{\' \'}\n    <Link title="The last tip!" id="t-4">\n      twitter handle\n    </Link>{\' \'}\n    freegan cred raw denim single-origin coffee viral.\n  </p>,\n);\n'},"/xTU":function(e,t){e.exports="<ButtonToolbar>\n  {['top', 'right', 'bottom', 'left'].map(placement => (\n    <OverlayTrigger\n      key={placement}\n      placement={placement}\n      overlay={\n        <Tooltip id={`tooltip-${placement}`}>\n          Tooltip on <strong>{placement}</strong>.\n        </Tooltip>\n      }\n    >\n      <Button variant=\"secondary\">Tooltip on {placement}</Button>\n    </OverlayTrigger>\n  ))}\n</ButtonToolbar>;\n"},"2SAL":function(e,t){e.exports='function Example() {\n  const [show, setShow] = useState(false);\n  const [target, setTarget] = useState(null);\n  const ref = useRef(null);\n\n  const handleClick = event => {\n    setShow(!show);\n    setTarget(event.target);\n  };\n\n  return (\n    <ButtonToolbar ref={ref}>\n      <Button onClick={handleClick}>Holy guacamole!</Button>\n\n      <Overlay\n        show={show}\n        target={target}\n        placement="bottom"\n        container={ref.current}\n        containerPadding={20}\n      >\n        <Popover id="popover-contained">\n          <Popover.Title as="h3">Popover bottom</Popover.Title>\n          <Popover.Content>\n            <strong>Holy guacamole!</strong> Check this info.\n          </Popover.Content>\n        </Popover>\n      </Overlay>\n    </ButtonToolbar>\n  );\n}\n\nrender(<Example />);\n'},"5Pna":function(e,t){e.exports="<ButtonToolbar>\n  {['top', 'right', 'bottom', 'left'].map(placement => (\n    <OverlayTrigger\n      trigger=\"click\"\n      key={placement}\n      placement={placement}\n      overlay={\n        <Popover id={`popover-positioned-${placement}`}>\n          <Popover.Title as=\"h3\">{`Popover ${placement}`}</Popover.Title>\n          <Popover.Content>\n            <strong>Holy guacamole!</strong> Check this info.\n          </Popover.Content>\n        </Popover>\n      }\n    >\n      <Button variant=\"secondary\">Popover on {placement}</Button>\n    </OverlayTrigger>\n  ))}\n</ButtonToolbar>;\n"},BZ6w:function(e,t){e.exports='const popover = (\n  <Popover id="popover-basic">\n    <Popover.Title as="h3">Popover right</Popover.Title>\n    <Popover.Content>\n      And here\'s some <strong>amazing</strong> content. It\'s very engaging.\n      right?\n    </Popover.Content>\n  </Popover>\n);\n\nconst Example = () => (\n  <OverlayTrigger trigger="click" placement="right" overlay={popover}>\n    <Button variant="success">Click me to see</Button>\n  </OverlayTrigger>\n);\n\nrender(<Example />);\n'},J0j7:function(e,t,n){"use strict";n.r(t),n.d(t,"query",(function(){return A}));var a=n("mXGw"),o=n.n(a),r=n("+xvc"),l=n("vXRK"),i=n("1u5/"),c=n("oGE0"),s=n.n(c),p=n("afGt"),d=n.n(p),m=n("trmH"),u=n.n(m),h=n("Zf7U"),v=n.n(h),g=n("/02+"),y=n.n(g),f=n("O0ME"),E=n.n(f),T=n("/xTU"),w=n.n(T),b=n("BZ6w"),O=n.n(b),x=n("2SAL"),k=n.n(x),P=n("5Pna"),B=n.n(P),C=n("r+yI"),S=n("Q+lg");t.default=Object(C.a)((function(e){var t=e.data;return o.a.createElement(o.a.Fragment,null,o.a.createElement(r.default,{h:"1",id:"overlays"},"Overlays"),o.a.createElement("p",{className:"lead"},"A set of components for positioning beautiful overlays, tooltips, popovers, and anything else you need."),o.a.createElement(r.default,{h:"2",id:"overlays-overview"},"Overview"),o.a.createElement("p",null,"Things to know about the React-Boostrap Overlay components."),o.a.createElement("ul",null,o.a.createElement("li",null,"Overlays rely on the third-party library"," ",o.a.createElement("a",{href:"https://github.com/FezVrasta/react-popper"},"react-popper"),", a tiny React wrapper around"," ",o.a.createElement("a",{href:"https://popper.js.org/"},"Popper.js"),". It's included automatically with React-Bootstrap, but you should reference the API for more advanced use cases."),o.a.createElement("li",null,"The ",o.a.createElement("code",null,"<Tooltip>")," and ",o.a.createElement("code",null,"<Popover>")," ","components do not position themselves. Instead the"," ",o.a.createElement("code",null,"<Overlay>")," (or ",o.a.createElement("code",null,"<OverlayTrigger>"),") components, inject ",o.a.createElement("code",null,"ref")," and ",o.a.createElement("code",null,"style")," props."),o.a.createElement("li",null,"Tooltip expects specific props injected by the"," ",o.a.createElement("code",null,"<Overlay>")," component"),o.a.createElement("li",null,"Tooltips for ",o.a.createElement("code",null,"disabled")," elements must be triggered on a wrapper element.")),o.a.createElement(r.default,{h:"2",id:"overlays"},"Overlay"),o.a.createElement("p",null,o.a.createElement("code",null,"Overlay")," is the fundamental component for positioning and controlling tooltip visibility. It's a wrapper around react-popper, that adds support for transitions, and visibility toggling."),o.a.createElement(r.default,{h:"3",id:"creating-an-overlay"},"Creating an Overlay"),o.a.createElement("p",null,'Overlays consist of at least two elements, the "overlay", the element to be positioned, as well as a "target", the element the overlay is positioned in relation to. You can also also have an "arrow" element, like the tooltips and popovers, but that is optional. Be sure to'," ",o.a.createElement("strong",null,"check out the"," ",o.a.createElement("a",{href:"https://github.com/FezVrasta/react-popper#api-documentation"},"react-popper")," ","documentation for more details about the injected props.")),o.a.createElement(i.a,{codeText:s.a}),o.a.createElement(r.default,{h:"3",id:"overlay-trigger"},"OverlayTrigger"),o.a.createElement("p",null,"Since the above pattern is pretty common, but verbose, we've included"," ",o.a.createElement("code",null,"<OverlayTrigger>"),' component to help with common use-cases. It even has functionality to delayed show or hides, and a few different "trigger" events you can mix and match.'),o.a.createElement("p",null,"Note that triggering components"," ",o.a.createElement("strong",null,"must be able to accept"," ",o.a.createElement("a",{href:"https://reactjs.org/docs/refs-and-the-dom.html"},"a ref"))," ","since ",o.a.createElement("code",null,"<OverlayTrigger>")," will attempt to add one. You can use"," ",o.a.createElement("a",{href:"https://reactjs.org/docs/react-api.html#reactforwardref"},"forwardRef()")," ","for function components."),o.a.createElement(i.a,{codeText:v.a}),o.a.createElement(r.default,{h:"2",id:"tooltips"},"Tooltips"),o.a.createElement("p",{className:"lead"},"A tooltip component for a more stylish alternative to that anchor tag"," ",o.a.createElement("code",null,"title")," attribute."),o.a.createElement(r.default,{h:"3",id:"tooltip-examples"},"Examples"),o.a.createElement("p",null,"Hover over the links below to see tooltips."),o.a.createElement(i.a,{codeText:y.a,showCode:!1}),o.a.createElement("p",null,"You can pass the ",o.a.createElement("code",null,"Overlay")," injected props directly to the Tooltip component."),o.a.createElement(i.a,{codeText:E.a}),o.a.createElement("p",null,"Or pass a Tooltip element to ",o.a.createElement("code",null,"OverlayTrigger")," instead."),o.a.createElement(i.a,{codeText:w.a}),o.a.createElement(r.default,{h:"2",id:"popovers"},"Popovers"),o.a.createElement("p",{className:"lead"},"A popover component, like those found in iOS."),o.a.createElement(r.default,{h:"3",id:"popover-examples"},"Examples"),o.a.createElement(i.a,{codeText:O.a}),o.a.createElement("p",null,"As with ",o.a.createElement("code",null,"<Tooltip>"),"s, you can control the placement of the Popover."),o.a.createElement(i.a,{codeText:B.a}),o.a.createElement(r.default,{h:"2",id:"overlays-disabled"},"Disabled elements"),o.a.createElement("p",null,"Elements with the ",o.a.createElement("code",null,"disabled")," attribute aren’t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip). As a workaround, you’ll want to trigger the overlay from a wrapper ",o.a.createElement("code",null,"<div>")," or ",o.a.createElement("code",null,"<span>")," and override the ",o.a.createElement("code",null,"pointer-events")," on the disabled element."),o.a.createElement(i.a,{codeText:d.a}),o.a.createElement(r.default,{h:"2",id:"overlays-container"},"Changing containers"),o.a.createElement("p",null,"You can specify a ",o.a.createElement("code",null,"container")," to control the DOM element the overlay is appended to. This is especially useful when styles conflict with your Overlay's."),o.a.createElement(i.a,{codeText:k.a,exampleClassName:S.contained}),o.a.createElement(r.default,{h:"2",id:"overlays-dynamic-updates"},"Updating position dynamically"),o.a.createElement("p",null,"Since we can't know every time your overlay changes size, to reposition it, you need to take manual action if you want to update the position of an Overlay in response to a change."),o.a.createElement("p",null,"For this, the Overlay component also injects a"," ",o.a.createElement("code",null,"scheduleUpdate()")," method that an overlay component can use to reposition itself."),o.a.createElement(i.a,{codeText:u.a}),o.a.createElement(r.default,{h:"2",id:"overlays-api"},"API"),o.a.createElement(l.a,{metadata:t.Overlay}),o.a.createElement(l.a,{metadata:t.OverlayTrigger}),o.a.createElement(l.a,{metadata:t.Tooltip}),o.a.createElement(l.a,{metadata:t.Popover}),o.a.createElement(l.a,{metadata:t.PopoverContent}),o.a.createElement(l.a,{metadata:t.PopoverTitle}))}));var A="287733515"},O0ME:function(e,t){e.exports='function Example() {\n  const [show, setShow] = useState(false);\n  const target = useRef(null);\n\n  return (\n    <>\n      <Button ref={target} onClick={() => setShow(!show)}>\n        Click me!\n      </Button>\n      <Overlay target={target.current} show={show} placement="right">\n        {props => (\n          <Tooltip id="overlay-example" {...props}>\n            My Tooltip\n          </Tooltip>\n        )}\n      </Overlay>\n    </>\n  );\n}\n\nrender(<Example />);\n'},Zf7U:function(e,t){e.exports='function renderTooltip(props) {\n  return <Tooltip {...props}>Simple tooltip</Tooltip>;\n}\n\nconst Example = () => (\n  <OverlayTrigger\n    placement="right"\n    delay={{ show: 250, hide: 400 }}\n    overlay={renderTooltip}\n  >\n    <Button variant="success">Hover me to see</Button>\n  </OverlayTrigger>\n);\n\nrender(<Example />);\n'},afGt:function(e,t){e.exports='<OverlayTrigger overlay={<Tooltip id="tooltip-disabled">Tooltip!</Tooltip>}>\n  <span className="d-inline-block">\n    <Button disabled style={{ pointerEvents: \'none\' }}>\n      Disabled button\n    </Button>\n  </span>\n</OverlayTrigger>;\n'},oGE0:function(e,t){e.exports="function Example() {\n  const [show, setShow] = useState(false);\n  const target = useRef(null);\n\n  return (\n    <>\n      <Button variant=\"danger\" ref={target} onClick={() => setShow(!show)}>\n        Click me to see\n      </Button>\n      <Overlay target={target.current} show={show} placement=\"right\">\n        {({\n          placement,\n          scheduleUpdate,\n          arrowProps,\n          outOfBoundaries,\n          show: _show,\n          ...props\n        }) => (\n          <div\n            {...props}\n            style={{\n              backgroundColor: 'rgba(255, 100, 100, 0.85)',\n              padding: '2px 10px',\n              color: 'white',\n              borderRadius: 3,\n              ...props.style,\n            }}\n          >\n            Simple tooltip\n          </div>\n        )}\n      </Overlay>\n    </>\n  );\n}\n\nrender(<Example />);\n"},trmH:function(e,t){e.exports="const UpdatingPopover = React.forwardRef(\n  ({ scheduleUpdate, children, ...props }, ref) => {\n    useEffect(() => {\n      console.log('updating!');\n      scheduleUpdate();\n    }, [children, scheduleUpdate]);\n    return (\n      <Popover ref={ref} {...props}>\n        {children}\n      </Popover>\n    );\n  },\n);\n\nconst longContent = `\n  Very long\n  Multiline content\n  that is engaging and what-not\n`;\nconst shortContent = 'Short and sweet!';\n\nfunction Example() {\n  const [content, setContent] = useState(shortContent);\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setContent(content === shortContent ? longContent : shortContent);\n    }, 3000);\n\n    return () => clearInterval(timerId);\n  });\n\n  return (\n    <OverlayTrigger\n      trigger=\"click\"\n      overlay={\n        <UpdatingPopover id=\"popover-contained\">{content}</UpdatingPopover>\n      }\n    >\n      <Button>Holy guacamole!</Button>\n    </OverlayTrigger>\n  );\n}\n\nrender(<Example />);\n"}}]);
//# sourceMappingURL=component---src-pages-components-overlays-js-8822b8b54353027584fb.js.map