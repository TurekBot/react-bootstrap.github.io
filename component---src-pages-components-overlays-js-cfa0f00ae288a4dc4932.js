webpackJsonp([74086763614190],{464:function(e,t){"use strict";e.exports='class Example extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.getTarget = this.getTarget.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n\n    this.state = {\n      show: true\n    };\n  }\n\n  getTarget() {\n    return ReactDOM.findDOMNode(this.target);\n  }\n\n  handleToggle() {\n    this.setState({ show: !this.state.show });\n  }\n\n  render() {\n    const sharedProps = {\n      container: this,\n      target: this.getTarget,\n      show: this.state.show\n    };\n\n    return (\n      <div style={{ height: 100, paddingLeft: 150, position: \'relative\' }}>\n        <Button\n          ref={button => {\n            this.target = button;\n          }}\n          onClick={this.handleToggle}\n        >\n          Click me!\n        </Button>\n\n        <Overlay {...sharedProps} placement="left">\n          <Tooltip id="overload-left">Tooltip overload!</Tooltip>\n        </Overlay>\n        <Overlay {...sharedProps} placement="top">\n          <Tooltip id="overload-top">Tooltip overload!</Tooltip>\n        </Overlay>\n        <Overlay {...sharedProps} placement="right">\n          <Tooltip id="overload-right">Tooltip overload!</Tooltip>\n        </Overlay>\n        <Overlay {...sharedProps} placement="bottom">\n          <Tooltip id="overload-bottom">Tooltip overload!</Tooltip>\n        </Overlay>\n      </div>\n    );\n  }\n}\n\nrender(<Example />);\n'},465:function(e,t){"use strict";e.exports="function CustomPopover({ className, style }) {\n  return (\n    <div\n      className={className}\n      style={{\n        ...style,\n        position: 'absolute',\n        backgroundColor: '#EEE',\n        boxShadow: '0 5px 10px rgba(0, 0, 0, 0.2)',\n        border: '1px solid #CCC',\n        borderRadius: 3,\n        marginLeft: -5,\n        marginTop: 5,\n        padding: 10\n      }}\n    >\n      <strong>Holy guacamole!</strong> Check this info.\n    </div>\n  );\n}\n\nclass Example extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleToggle = this.handleToggle.bind(this);\n\n    this.state = {\n      show: true\n    };\n  }\n\n  handleToggle() {\n    this.setState({ show: !this.state.show });\n  }\n\n  render() {\n    return (\n      <div style={{ height: 100, position: 'relative' }}>\n        <Button\n          ref={button => {\n            this.target = button;\n          }}\n          onClick={this.handleToggle}\n        >\n          I am an Overlay target\n        </Button>\n\n        <Overlay\n          show={this.state.show}\n          onHide={() => this.setState({ show: false })}\n          placement=\"right\"\n          container={this}\n          target={() => ReactDOM.findDOMNode(this.target)}\n        >\n          <CustomPopover />\n        </Overlay>\n      </div>\n    );\n  }\n}\n\nrender(<Example />);\n"},532:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function a(e){var t=e.data;return r.default.createElement("div",{className:"bs-docs-section"},r.default.createElement("h2",{className:"page-header"},r.default.createElement(d.default,{id:"custom-overlays"},"Custom overlays")," ",r.default.createElement("small",null,"Overlay")),r.default.createElement("p",null,"The ",r.default.createElement("code",null,"OverlayTrigger")," component is great for most use cases, but as a higher level abstraction it can lack the flexibility needed to build more nuanced or custom behaviors into your Overlay components. For these cases it can be helpful to forgo the trigger and use the"," ",r.default.createElement("code",null,"Overlay")," component directly."),r.default.createElement(m.default,{codeText:f.default}),r.default.createElement("h4",null,r.default.createElement(d.default,{id:"custom-overlays-overlay"},"Use Overlay instead of Tooltip and Popover")),r.default.createElement("p",null,"You don't need to use the provided ",r.default.createElement("code",null,"Tooltip")," or"," ",r.default.createElement("code",null,"Popover")," components. Creating custom overlays is as easy as wrapping some markup in an ",r.default.createElement("code",null,"Overlay")," component. Make sure to pass down the ",r.default.createElement("code",null,"className")," and ",r.default.createElement("code",null,"style")," props to the wrapped element to make positioning and transitions work."),r.default.createElement(m.default,{codeText:y.default}),r.default.createElement("h3",null,r.default.createElement(d.default,{id:"custom-overlays-props"},"Props"),r.default.createElement(u.default,{component:t.Overlay.displayName})),r.default.createElement(p.default,{metadata:t.Overlay}))}t.__esModule=!0,t.query=void 0,t.default=a;var l=n(1),r=o(l),s=n(12),d=o(s),i=n(17),u=o(i),c=n(14),p=o(c),h=n(13),m=o(h),g=n(464),f=o(g),v=n(465),y=o(v);t.query="** extracted graphql fragment **"}});
//# sourceMappingURL=component---src-pages-components-overlays-js-cfa0f00ae288a4dc4932.js.map