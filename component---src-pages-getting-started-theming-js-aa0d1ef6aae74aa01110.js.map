{"version":3,"sources":["webpack:///./src/pages/getting-started/theming.js","webpack:///./src/withLayout.js","webpack:///./src/components/Callout.js","webpack:///./src/components/Callout-styles.module.scss?9dfa","webpack:///./src/examples/Theming/Prefixes.js","webpack:///./src/examples/Theming/Variants.js"],"names":["ThemingSection","Variants","Prefixes","withLayout","Component","props","pathname","location","Layout","startsWith","styles","propTypes","title","node","children","theme","oneOf","Callout","module","exports"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEe,kIAAU,CAAC,SAASA,cAAT,GAA0B;AAClD,SACE,wHACE,2DAAC,iEAAD;AAAe,KAAC,EAAC,GAAjB;AAAqB,MAAE,EAAC;AAAxB,uCADF,EAKE,0VALF,EAWE,2DAAC,iEAAD;AAAe,KAAC,EAAC,GAAjB;AAAqB,MAAE,EAAC;AAAxB,8BAXF,EAcE,wMAE+D,GAF/D,EAGE,wFAHF,iIAdF,EAqBE,2DAAC,2EAAD;AAAiB,YAAQ,EAAE,iEAAQC;AAAnC,IArBF,EAuBE,2DAAC,iEAAD;AAAe,KAAC,EAAC,GAAjB;AAAqB,MAAE,EAAC;AAAxB,4BAvBF,EA0BE,mPAG2B,oFAH3B,gCAG2E,GAH3E,EAIE,yFAJF,gBA1BF,EAgCE,2DAAC,mEAAD;AAAS,SAAK,EAAC;AAAf,4EAhCF,EAmCE,2DAAC,2EAAD;AAAiB,YAAQ,EAAE,iEAAQC;AAAnC,IAnCF,CADF;AAuCD,CAxCwB,CAAzB,E;;;;;;;;;;;;;;;;ACTA;AAEA;AACA;AAEe,SAASC,UAAT,CAAoBC,SAApB,EAA+B;AAC5C,SAAO,UAAAC,KAAK,EAAI;AAAA,QACNC,QADM,GACOD,KAAK,CAACE,QADb,CACND,QADM;AAEd,QAAIE,MAAM,GAAG,wDAAb;;AACA,QACEF,QAAQ,CAACG,UAAT,CAAoB,kBAApB,KACAH,QAAQ,CAACG,UAAT,CAAoB,SAApB,CADA,IAEAH,QAAQ,CAACG,UAAT,CAAoB,aAApB,CAFA,IAGAH,QAAQ,CAACG,UAAT,CAAoB,YAApB,CAJF,EAKE;AACAD,YAAM,GAAG,kEAAT;AACD;;AAED,WACE,2DAAC,MAAD;AAAQ,cAAQ,EAAEH,KAAK,CAACE;AAAxB,OACE,2DAAC,SAAD,EAAeF,KAAf,CADF,CADF;AAKD,GAjBD;AAkBD,C;;;;;;;;ACxBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA,IAAMK,MAAM,GAAG,mBAAO,CAAC,GAAD,CAAtB;;AAEA,IAAMC,SAAS,GAAG;AAChBC,OAAK,EAAE,iDAAS,CAACC,IADD;AAEhBC,UAAQ,EAAE,iDAAS,CAACD,IAFJ;AAGhBE,OAAK,EAAE,iDAAS,CAACC,KAAV,CAAgB,CAAC,QAAD,EAAW,SAAX,CAAhB;AAHS,CAAlB;;AAMA,SAASC,OAAT,OAA6C;AAAA,MAA1BL,KAA0B,QAA1BA,KAA0B;AAAA,MAAnBE,QAAmB,QAAnBA,QAAmB;AAAA,MAATC,KAAS,QAATA,KAAS;AAC3C,SACE;AAAO,QAAI,EAAC,MAAZ;AAAmB,aAAS,EAAEL,MAAM,CAACK,KAAK,IAAI,SAAV;AAApC,KACGH,KAAK,IAAI;AAAQ,aAAS,EAAC;AAAlB,KAAwBA,KAAxB,CADZ,EAEE,wEAAME,QAAN,CAFF,CADF;AAMD;;AAEDG,OAAO,CAACN,SAAR,GAAoBA,SAApB;AAEe,yDAAAM,OAAf,E;;;;;;;ACxBA;AACA,kBAAkB,iO;;;;;;;ACDlBC,MAAM,CAACC,OAAP,GAAiB,iSAAjB,C;;;;;;;ACAAD,MAAM,CAACC,OAAP,GAAiB,6SAAjB,C","file":"component---src-pages-getting-started-theming-js-aa0d1ef6aae74aa01110.js","sourcesContent":["import React from 'react';\n\nimport Callout from '../../components/Callout';\nimport LinkedHeading from '../../components/LinkedHeading';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport Prefixes from '../../examples/Theming/Prefixes';\nimport Variants from '../../examples/Theming/Variants';\nimport withLayout from '../../withLayout';\n\nexport default withLayout(function ThemingSection() {\n  return (\n    <>\n      <LinkedHeading h=\"1\" id=\"custom-styles\">\n        Theming and Customizing styles.\n      </LinkedHeading>\n\n      <p>\n        Generally, if you stick to the bootstrap defined classes and variants,\n        there isn't anything you need to do to use a custom theme with\n        ReactBootstrap, it just works. There are plently of cases tho where you\n        want to color outside the lines and we try to make that easy to do.\n      </p>\n      <LinkedHeading h=\"2\" id=\"custom-styles-variants\">\n        New variants and sizes\n      </LinkedHeading>\n      <p>\n        Custom variants and sizes to should follow the leapatternd of the\n        default bootstrap variants, and define css classes matching:{' '}\n        <code>compontent-*</code>. React bootstrap builds the component\n        classNames in a consistent way that you can rely on. For instance this\n        custom Button.\n      </p>\n      <ReactPlayground codeText={Variants} />\n\n      <LinkedHeading h=\"2\" id=\"custom-styles-prefix\">\n        Prefixing components\n      </LinkedHeading>\n      <p>\n        In some cases you may need to change the base class \"prefix\" of one or\n        more Components. You can control how a Component prefixes it's classes\n        locallyy by changing the <code>bsPrefix</code> prop. Or globally via the{' '}\n        <code>ThemeProvider</code> Component.\n      </p>\n      <Callout theme=\"warning\">\n        Changing prefixes is an escape hatch and generally shouldn't be used\n      </Callout>\n      <ReactPlayground codeText={Prefixes} />\n    </>\n  );\n});\n","import React from 'react';\n\nimport ApiLayout from './layouts/ApiLayout';\nimport DefaultLayout from './layouts';\n\nexport default function withLayout(Component) {\n  return props => {\n    const { pathname } = props.location;\n    let Layout = DefaultLayout;\n    if (\n      pathname.startsWith('/getting-started') ||\n      pathname.startsWith('/layout') ||\n      pathname.startsWith('/components') ||\n      pathname.startsWith('/utilities')\n    ) {\n      Layout = ApiLayout;\n    }\n\n    return (\n      <Layout location={props.location}>\n        <Component {...props} />\n      </Layout>\n    );\n  };\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { css } from 'css-literal-loader/styled';\n\nconst styles = require('./Callout-styles.module.scss');\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","module.exports = \"<>\\n  {/* Hint: inspect the markup to see how the classes differ */}\\n  <ThemeProvider prefixes={{ btn: 'my-btn' }}>\\n    <Button variant=\\\"primary\\\">My Button</Button>\\n  </ThemeProvider>{' '}\\n  <Button bsPrefix=\\\"super-btn\\\" variant=\\\"primary\\\">\\n    Super button\\n  </Button>\\n</>;\\n\"","module.exports = \"<>\\n  <style type=\\\"text/css\\\">\\n    {`\\n    .btn-flat {\\n      background-color: purple;\\n      color: white;\\n    }\\n\\n    .btn-xxl {\\n      padding: 1rem 1.5rem;\\n      font-size: 1.5rem;\\n    }\\n    `}\\n  </style>\\n\\n  <Button variant=\\\"flat\\\" size=\\\"xxl\\\">\\n    flat button\\n  </Button>\\n</>;\\n\""],"sourceRoot":""}