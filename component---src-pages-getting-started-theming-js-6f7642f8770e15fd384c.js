(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{1083:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),s=n(1117),r=n(123),l=n(1064),i=n(1215),c=n.n(i),u=n(1216),m=n.n(u),d=n(1066);t.default=Object(d.a)(function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(r.default,{h:"1",id:"custom-styles"},"Theming and Customizing styles."),o.a.createElement("p",null,"Generally, if you stick to the Bootstrap defined classes and variants, there isn't anything you need to do to use a custom theme with React-Bootstrap. It just works. But we also make coloring outside the lines easy to do."),o.a.createElement(r.default,{h:"2",id:"custom-styles-variants"},"New variants and sizes"),o.a.createElement("p",null,"Custom variants and sizes should follow the pattern of the default bootstrap variants, and define css classes matching:"," ",o.a.createElement("code",null,"component-*"),". React bootstrap builds the component",o.a.createElement("code",null,"classNames")," in a consistent way that you can rely on. For instance this custom Button."),o.a.createElement(l.a,{codeText:m.a}),o.a.createElement(r.default,{h:"2",id:"custom-styles-prefix"},"Prefixing components"),o.a.createElement("p",null,'In some cases you may need to change the base class "prefix" of one or more Components. You can control how a Component prefixes it\'s classes locally by changing the ',o.a.createElement("code",null,"bsPrefix")," prop. Or globally via the"," ",o.a.createElement("code",null,"ThemeProvider")," Component."),o.a.createElement(s.a,{theme:"warning"},"Changing prefixes is an escape hatch and generally shouldn't be used."),o.a.createElement(l.a,{codeText:c.a}))})},1117:function(e,t,n){"use strict";var a=n(0),o=n.n(a),s=n(1067);t.a=function(e){var t=e.title,n=e.children,a=e.theme;return o.a.createElement("aside",{role:"note",className:s[a||"warning"]},t&&o.a.createElement("header",{className:"h5"},t),o.a.createElement("div",null,n))}},1215:function(e,t){e.exports='<>\n  {/* Hint: inspect the markup to see how the classes differ */}\n  <ThemeProvider prefixes={{ btn: \'my-btn\' }}>\n    <Button variant="primary">My Button</Button>\n  </ThemeProvider>{\' \'}\n  <Button bsPrefix="super-btn" variant="primary">\n    Super button\n  </Button>\n</>;\n'},1216:function(e,t){e.exports='<>\n  <style type="text/css">\n    {`\n    .btn-flat {\n      background-color: purple;\n      color: white;\n    }\n\n    .btn-xxl {\n      padding: 1rem 1.5rem;\n      font-size: 1.5rem;\n    }\n    `}\n  </style>\n\n  <Button variant="flat" size="xxl">\n    flat button\n  </Button>\n</>;\n'}}]);
//# sourceMappingURL=component---src-pages-getting-started-theming-js-6f7642f8770e15fd384c.js.map