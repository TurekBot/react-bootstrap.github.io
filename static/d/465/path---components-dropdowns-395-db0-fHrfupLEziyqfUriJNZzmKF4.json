{"data":{"DropdownButton":{"displayName":"DropdownButton","composes":null,"description":null,"props":[{"name":"id","doclets":{"type":"{string|number}","required":true},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.</p>"}},"required":true,"type":{"name":"string|number","value":null,"raw":null}},{"name":"href","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An <code class=\"language-text\">href</code> passed to the Toggle component</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"onClick","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An <code class=\"language-text\">onClick</code> handler passed to the Toggle component</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"title","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The content of the non-toggle Button.</p>"}},"required":true,"type":{"name":"node","value":null,"raw":null}},{"name":"disabled","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Disables both Buttons</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"menuRole","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Which event when fired outside the component will cause it to be closed.</p>\n<p><em>see <a href=\"#menu-props\">DropdownMenu</a> for more details</em></p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"bsPrefix","doclets":{"ignore":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"variant","doclets":{"ignore":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"size","doclets":{"ignore":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}}]},"SplitButton":{"displayName":"SplitButton","composes":null,"description":null,"props":[{"name":"id","doclets":{"type":"{string|number}","required":true},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.</p>"}},"required":true,"type":{"name":"string|number","value":null,"raw":null}},{"name":"toggleLabel","doclets":{},"defaultValue":{"value":"'Toggle dropdown'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Accessible label for the toggle; the value of <code class=\"language-text\">title</code> if not specified.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"href","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An <code class=\"language-text\">href</code> passed to the non-toggle Button</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"target","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An anchor <code class=\"language-text\">target</code> passed to the non-toggle Button</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"onClick","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An <code class=\"language-text\">onClick</code> handler passed to the non-toggle Button</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"title","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The content of the non-toggle Button.</p>"}},"required":true,"type":{"name":"node","value":null,"raw":null}},{"name":"disabled","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Disables both Buttons</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"menuRole","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Which event when fired outside the component will cause it to be closed.</p>\n<p><em>see <a href=\"#menu-props\">DropdownMenu</a> for more details</em></p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"bsPrefix","doclets":{"ignore":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"variant","doclets":{"ignore":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"size","doclets":{"ignore":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}}]},"Dropdown":{"displayName":"Dropdown","composes":null,"description":{"childMarkdownRemark":{"html":"<p>A convenience component for simple or general use dropdowns. Renders a <code class=\"language-text\">Button</code> toggle and all <code class=\"language-text\">children</code>\nare passed directly to the default <code class=\"language-text\">Dropdown.Menu</code>.</p>\n<p><strong>All unknown props are passed through to the <code class=\"language-text\">Dropdown</code> component. Only\nthe button <code class=\"language-text\">variant</code>, <code class=\"language-text\">size</code> and <code class=\"language-text\">bsPrefix</code> props are passed to the toggle,\nalong with menu related props are passed to the <code class=\"language-text\">Dropdown.Menu</code></strong></p>"}},"props":[{"name":"bsPrefix","doclets":{"default":"'dropdown'"},"defaultValue":{"value":"'dropdown'","computed":false},"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"drop","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Determines the direction and location of the Menu in relation to it's Toggle.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'up'","computed":false},{"value":"'left'","computed":false},{"value":"'right'","computed":false},{"value":"'down'","computed":false}],"raw":null}},{"name":"as","doclets":{},"defaultValue":{"value":"'div'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}},{"name":"alignRight","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Align the menu to the right side of the Dropdown toggle</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"show","doclets":{"controllable":"onToggle"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether or not the Dropdown is visible.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"flip","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\nPopper.js's flip <a href=\"https://popper.js.org/popper-documentation.html#modifiers..flip.enabled\">docs</a>.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onToggle","doclets":{"controllable":"show"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the Dropdown wishes to change visibility. Called with the requested\n<code class=\"language-text\">show</code> value, the DOM event, and the source that fired it: <code class=\"language-text\">&#39;click&#39;</code>,<code class=\"language-text\">&#39;keydown&#39;</code>,<code class=\"language-text\">&#39;rootClose&#39;</code>, or <code class=\"language-text\">&#39;select&#39;</code>.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  isOpen<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n  event<span class=\"token punctuation\">:</span> SyntheticEvent<span class=\"token punctuation\">,</span>\n  metadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    source<span class=\"token punctuation\">:</span> <span class=\"token string\">'select'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'click'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'rootCloose'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'keydown'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span></code></pre>\n      </div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onSelect","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when a menu item is selected.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>eventKey<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any</code></pre>\n      </div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"navbar","doclets":{"private":true},"defaultValue":{"value":"false","computed":false},"description":null,"required":false,"type":{"name":"bool","value":null,"raw":null}}]},"DropdownToggle":{"displayName":"DropdownToggle","composes":null,"description":null,"props":[{"name":"bsPrefix","doclets":{"default":"'dropdown-toggle'"},"defaultValue":{"value":"'dropdown-toggle'","computed":false},"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"title","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"id","doclets":{"type":"{string|number}","required":true},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute, necessary for assistive technologies, such as screen readers.</p>"}},"required":true,"type":{"name":"string|number","value":null,"raw":"isRequiredForA11y(PropTypes.any)"}},{"name":"split","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"as","doclets":{},"defaultValue":{"value":"Button","computed":true},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}},{"name":"childBsPrefix","doclets":{"private":true},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>to passthrough to the underlying button or whatever from DropdownButton</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"DropdownMenu":{"displayName":"DropdownMenu","composes":null,"description":null,"props":[{"name":"bsPrefix","doclets":{"default":"'dropdown-menu'"},"defaultValue":{"value":"'dropdown-menu'","computed":false},"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"show","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Controls the visibility of the Dropdown menu</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"alignRight","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Aligns the Dropdown menu to the right of it's container.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onSelect","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Which event when fired outside the component will cause it to be closed</p>\n<p><em>Note: For custom dropdown components, you will have to pass the\n<code class=\"language-text\">rootCloseEvent</code> to <code class=\"language-text\">&lt;RootCloseWrapper&gt;</code> in your custom dropdown menu\ncomponent (<a href=\"https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119\">similarly to how it is implemented in <code class=\"language-text\">&lt;Dropdown.Menu&gt;</code></a>).</em></p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'mousedown'","computed":false}],"raw":null}},{"name":"as","doclets":{},"defaultValue":{"value":"'div'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Control the rendering of the DropdownMenu. All non-menu props\n(listed here) are passed through to the <code class=\"language-text\">as</code> Component.</p>\n<p>If providing a custom, non DOM, component. the <code class=\"language-text\">show</code> and <code class=\"language-text\">alignRight</code> props\nare also injected and should be handled appropriatedly.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}}]},"DropdownItem":null},"pageContext":{}}