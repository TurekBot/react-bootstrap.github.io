{"data":{"Navbar":{"composes":null,"displayName":"Navbar","description":null,"props":[{"name":"fixedTop","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Create a fixed navbar along the top of the screen, that scrolls with the\npage</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"fixedBottom","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Create a fixed navbar along the bottom of the screen, that scrolls with\nthe page</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"staticTop","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Create a full-width navbar that scrolls away with the page</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"inverse","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>An alternative dark visual style for the Navbar</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"fluid","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Allow the Navbar to fluidly adjust to the page or container width, instead\nof at the predefined screen breakpoints</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"componentClass","doclets":{},"defaultValue":{"value":"'nav'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Set a custom element for this component.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}},{"name":"onToggle","doclets":{"controllable":"expanded"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the <code class=\"language-text\">&lt;Navbar&gt;</code> body collapses or expands. Fired when\na <code class=\"language-text\">&lt;Navbar.Toggle&gt;</code> is clicked and called with the new <code class=\"language-text\">expanded</code>\nboolean value.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onSelect","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when a descendant of a child <code class=\"language-text\">&lt;Nav&gt;</code> is selected. Should\nbe used to execute complex closing or other miscellaneous actions desired\nafter selecting a descendant of <code class=\"language-text\">&lt;Nav&gt;</code>. Does nothing if no <code class=\"language-text\">&lt;Nav&gt;</code> or <code class=\"language-text\">&lt;Nav&gt;</code>\ndescendants exist. The callback is called with an eventKey, which is a\nprop from the selected <code class=\"language-text\">&lt;Nav&gt;</code> descendant, and an event.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n Any eventKey<span class=\"token punctuation\">,</span>\n SyntheticEvent event<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>For basic closing behavior after all <code class=\"language-text\">&lt;Nav&gt;</code> descendant onSelect events in\nmobile viewports, try using collapseOnSelect.</p>\n<p>Note: If you are manually closing the navbar using this <code class=\"language-text\">OnSelect</code> prop,\nensure that you are setting <code class=\"language-text\">expanded</code> to false and not <em>toggling</em> between\ntrue and false.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"collapseOnSelect","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Sets <code class=\"language-text\">expanded</code> to <code class=\"language-text\">false</code> after the onSelect event of a descendant of a\nchild <code class=\"language-text\">&lt;Nav&gt;</code>. Does nothing if no <code class=\"language-text\">&lt;Nav&gt;</code> or <code class=\"language-text\">&lt;Nav&gt;</code> descendants exist.</p>\n<p>The onSelect callback should be used instead for more complex operations\nthat need to be executed after the <code class=\"language-text\">select</code> event of <code class=\"language-text\">&lt;Nav&gt;</code> descendants.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"expanded","doclets":{"controllable":"onToggle"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Explicitly set the visiblity of the navbar body</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"role","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"bsStyle","doclets":{},"defaultValue":{"value":"'default'","computed":null},"description":{"childMarkdownRemark":{"html":"<p>Component visual or contextual style variants.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"\"default\""},{"value":"\"inverse\""}],"raw":null}}]},"NavbarToggle":{"composes":null,"displayName":"NavbarToggle","description":null,"props":[{"name":"onClick","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"children","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The toggle content, if left empty it will render the default toggle (seen above).</p>"}},"required":false,"type":{"name":"node","value":null,"raw":null}}]}},"pageContext":{}}