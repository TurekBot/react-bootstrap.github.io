{"data":{"DropdownButton":{"composes":["./Dropdown"],"displayName":"DropdownButton","description":null,"props":[{"name":"bsStyle","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Component visual or contextual style variants.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"bsSize","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Component size variations.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"title","doclets":{},"defaultValue":null,"description":null,"required":true,"type":{"name":"node","value":null,"raw":null}},{"name":"noCaret","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"children","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"node","value":null,"raw":null}}]},"SplitButton":{"composes":["./Dropdown"],"displayName":"SplitButton","description":null,"props":[{"name":"bsStyle","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Component visual or contextual style variants.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"bsSize","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Component size variations.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"href","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"onClick","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"title","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The content of the split button.</p>"}},"required":true,"type":{"name":"node","value":null,"raw":null}},{"name":"toggleLabel","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Accessible label for the toggle; the value of <code class=\"language-text\">title</code> if not specified.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"children","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"node","value":null,"raw":null}}]},"Dropdown":{"composes":null,"displayName":"Dropdown","description":null,"props":[{"name":"dropup","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The menu will open above the dropdown button, instead of below it.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"id","doclets":{"type":"{string|number}","required":true},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute, necessary for assistive technologies, such as screen readers.</p>"}},"required":true,"type":{"name":"string|number","value":null,"raw":"isRequiredForA11y(\n  PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n)"}},{"name":"componentClass","doclets":{},"defaultValue":{"value":"ButtonGroup","computed":true},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}},{"name":"children","doclets":{"type":"{node}"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The children of a Dropdown may be a <code class=\"language-text\">&lt;Dropdown.Toggle&gt;</code> or a <code class=\"language-text\">&lt;Dropdown.Menu&gt;</code>.</p>"}},"required":false,"type":{"name":"node","value":null,"raw":"all(\n  requiredRoles(TOGGLE_ROLE, MENU_ROLE),\n  exclusiveRoles(MENU_ROLE)\n)"}},{"name":"disabled","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether or not component is disabled.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"pullRight","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Align the menu to the right side of the Dropdown toggle</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"open","doclets":{"controllable":"onToggle"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether or not the Dropdown is visible.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"defaultOpen","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onToggle","doclets":{"controllable":"open"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the Dropdown wishes to change visibility. Called with the requested\n<code class=\"language-text\">open</code> value, the DOM event, and the source that fired it: <code class=\"language-text\">&#39;click&#39;</code>,<code class=\"language-text\">&#39;keydown&#39;</code>,<code class=\"language-text\">&#39;rootClose&#39;</code>, or <code class=\"language-text\">&#39;select&#39;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>Boolean isOpen<span class=\"token punctuation\">,</span> Object event<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> String source <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onSelect","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when a menu item is selected.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>eventKey<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any</code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"role","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>If <code class=\"language-text\">&#39;menuitem&#39;</code>, causes the dropdown to behave like a menu item rather than\na menu button.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Which event when fired outside the component will cause it to be closed</p>\n<p><em>Note: For custom dropdown components, you will have to pass the\n<code class=\"language-text\">rootCloseEvent</code> to <code class=\"language-text\">&lt;RootCloseWrapper&gt;</code> in your custom dropdown menu\ncomponent (<a href=\"https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119\">similarly to how it is implemented in <code class=\"language-text\">&lt;Dropdown.Menu&gt;</code></a>).</em></p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'mousedown'","computed":false}],"raw":null}},{"name":"onMouseEnter","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onMouseLeave","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"func","value":null,"raw":null}}]},"MenuItem":{"composes":null,"displayName":"MenuItem","description":null,"props":[{"name":"active","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Highlight the menu item as active.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"disabled","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Disable the menu item, making it unselectable.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"divider","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Styles the menu item as a horizontal rule, providing visual separation between\ngroups of menu items.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"all(\n  PropTypes.bool,\n  ({ divider, children }) =>\n    divider && children\n      ? new Error('Children will not be rendered for dividers')\n      : null\n)"}},{"name":"eventKey","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Value passed to the <code class=\"language-text\">onSelect</code> handler, useful for identifying the selected menu item.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"header","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Styles the menu item as a header label, useful for describing a group of menu items.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"href","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>HTML <code class=\"language-text\">href</code> attribute corresponding to <code class=\"language-text\">a.href</code>.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"onClick","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired when the menu item is clicked.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onSelect","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired when the menu item is selected.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>eventKey<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any</code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"bsClass","doclets":{},"defaultValue":{"value":"'dropdown'","computed":null},"description":{"childMarkdownRemark":{"html":"<p>Base CSS class and prefix for the component. Generally one should only change <code class=\"language-text\">bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]}},"pageContext":{}}