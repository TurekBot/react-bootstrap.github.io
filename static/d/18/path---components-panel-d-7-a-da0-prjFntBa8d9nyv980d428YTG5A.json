{"data":{"Panel":{"composes":null,"displayName":"Panel","description":null,"props":[{"name":"expanded","doclets":{"controllable":"onToggle"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Controls the collapsed/expanded state ofthe Panel. Requires\na <code class=\"language-text\">Panel.Collapse</code> or <code class=\"language-text\">&lt;Panel.Body collapsible&gt;</code> child component\nin order to actually animate out or in.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onToggle","doclets":{"controllable":"expanded"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the collapse state changes.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"eventKey","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A unique identifier for the Component, the <code class=\"language-text\">eventKey</code> makes it distinguishable from others in a set. Similar to React's <code class=\"language-text\">key</code> prop, in that it only needs to be unique amoungst the Components siblings, not globally.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"id","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An HTML <code class=\"language-text\">id</code> attribute uniquely identifying the Panel component.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"PanelHeading":{"composes":null,"displayName":"PanelHeading","description":null,"props":[{"name":"componentClass","doclets":{},"defaultValue":{"value":"'div'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}},{"name":"bsClass","doclets":{},"defaultValue":{"value":"'panel'","computed":null},"description":{"childMarkdownRemark":{"html":"<p>Base CSS class and prefix for the component. Generally one should only change <code class=\"language-text\">bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"PanelTitle":{"composes":null,"displayName":"PanelTitle","description":null,"props":[{"name":"componentClass","doclets":{},"defaultValue":{"value":"'div'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}},{"name":"toggle","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A convenience prop that renders the Panel.Title as a panel collapse toggle component\nfor the common use-case.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"bsClass","doclets":{},"defaultValue":{"value":"'panel'","computed":null},"description":{"childMarkdownRemark":{"html":"<p>Base CSS class and prefix for the component. Generally one should only change <code class=\"language-text\">bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"PanelBody":{"composes":null,"displayName":"PanelBody","description":null,"props":[{"name":"collapsible","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A convenience prop that renders a Collapse component around the Body for\nsituations when the parent Panel only contains a single Panel.Body child.</p>\n<p>renders:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Panel.Collapse</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Panel.Body</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Panel.Collapse</span><span class=\"token punctuation\">></span></span></code></pre></div>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"bsClass","doclets":{},"defaultValue":{"value":"'panel'","computed":null},"description":{"childMarkdownRemark":{"html":"<p>Base CSS class and prefix for the component. Generally one should only change <code class=\"language-text\">bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"PanelFooter":{"composes":null,"displayName":"PanelFooter","description":null,"props":[{"name":"bsClass","doclets":{},"defaultValue":{"value":"'panel'","computed":null},"description":{"childMarkdownRemark":{"html":"<p>Base CSS class and prefix for the component. Generally one should only change <code class=\"language-text\">bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"PanelToggle":{"composes":null,"displayName":"PanelToggle","description":null,"props":[{"name":"onClick","doclets":{"private":true},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>only here to satisfy linting, just the html onClick handler.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"componentClass","doclets":{},"defaultValue":{"value":"SafeAnchor","computed":true},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element for this component</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}}]},"PanelCollapse":{"composes":null,"displayName":"PanelCollapse","description":null,"props":[{"name":"onEnter","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the component expands</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntering","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the component starts to expand</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntered","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the component has expanded</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExit","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the component collapses</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExiting","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the component starts to collapse</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExited","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the component has collapsed</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"bsClass","doclets":{},"defaultValue":{"value":"'panel'","computed":null},"description":{"childMarkdownRemark":{"html":"<p>Base CSS class and prefix for the component. Generally one should only change <code class=\"language-text\">bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"PanelGroup":{"composes":null,"displayName":"PanelGroup","description":null,"props":[{"name":"accordion","doclets":{},"defaultValue":{"value":"false","computed":false},"description":null,"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"activeKey","doclets":{"controllable":"onSelect"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>When <code class=\"language-text\">accordion</code> is enabled, <code class=\"language-text\">activeKey</code> controls the which child <code class=\"language-text\">Panel</code> is expanded. <code class=\"language-text\">activeKey</code> should\nmatch a child Panel <code class=\"language-text\">eventKey</code> prop exactly.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"onSelect","doclets":{"controllable":"activeKey"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when a child Panel collapse state changes. It's called with the next expanded <code class=\"language-text\">activeKey</code></p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"role","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An HTML role attribute</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"generateChildId","doclets":{"defaultValue":"(eventKey, type) => `${this.props.id}-${type}-${key}`"},"defaultValue":{"value":"(eventKey, type) => `${this.props.id}-${type}-${key}`","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A function that takes an eventKey and type and returns a\nunique id for each Panel heading and Panel Collapse. The function <em>must</em> be a pure function,\nmeaning it should always return the <em>same</em> id for the same set of inputs. The default\nvalue requires that an <code class=\"language-text\">id</code> to be set for the PanelGroup.</p>\n<p>The <code class=\"language-text\">type</code> argument will either be <code class=\"language-text\">&quot;body&quot;</code> or <code class=\"language-text\">&quot;heading&quot;</code>.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"id","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>HTML id attribute, required if no <code class=\"language-text\">generateChildId</code> prop\nis specified.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"generatedId('PanelGroup')"}}]}},"pageContext":{}}