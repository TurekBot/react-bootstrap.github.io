(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{1106:function(n,e,o){"use strict";o.r(e),o.d(e,"query",function(){return P}),o.d(e,"_frontmatter",function(){return z}),o.d(e,"default",function(){return W});o(10),o(9),o(8),o(12),o(24),o(0);var t=o(122),d=o(273),r=o(1126),a=o(1065),p=o(1064),i=o(1290),m=o.n(i),c=o(1291),l=o.n(c),s=o(1292),w=o.n(s),u=o(1293),D=o.n(u),h=o(1294),y=o.n(h),b=o(1295),x=o.n(b),g=o(1296),I=o.n(g),v=o(1297),O=o.n(v),j=o(1298),T=o.n(j),f=o(1299),B=o.n(f),C=o(1300),A=o.n(C),K=o(1301),S=o.n(K),k=o(1302),N=o.n(k),M=o(1068),R=o.n(M);var P="1965085705",z={},$={query:P,_frontmatter:z},L=d.a;function W(n){var e=n.components,o=function(n,e){if(null==n)return{};var o,t,d={},r=Object.keys(n);for(t=0;t<r.length;t++)o=r[t],e.indexOf(o)>=0||(d[o]=n[o]);return d}(n,["components"]);return Object(t.mdx)(L,Object.assign({},$,o,{components:e,mdxType:"MDXLayout"}),Object(t.mdx)("h1",{id:"dropdowns"},"Dropdowns"),Object(t.mdx)("p",{className:"lead"},"Toggle contextual overlays for displaying lists of links and more with the Bootstrap dropdown plugin"),Object(t.mdx)("h2",{id:"overview"},"Overview"),Object(t.mdx)("p",null,"Dropdowns are toggleable, contextual overlays for displaying lists of\nlinks and more. Like overlays, Dropdowns are built using a third-party\nlibrary ",Object(t.mdx)("a",{href:"https://popper.js.org/"},"Popper.js"),", which provides\ndynamic positioning and viewport detection."),Object(t.mdx)("h2",{id:"accessibility"},"Accessibility"),Object(t.mdx)("p",null,"The ",Object(t.mdx)("a",{href:"https://www.w3.org/TR/wai-aria/"},Object(t.mdx)("abbr",{title:"Web Accessibility Initiative"},"WAI")," ",Object(t.mdx)(r.a,{mdxType:"ARIA"}))," standard\ndefines a ",Object(t.mdx)("a",Object.assign({parentName:"p"},{href:"https://www.w3.org/TR/wai-aria-1.1/#menu"}),Object(t.mdx)("inlineCode",{parentName:"a"},'role="menu"')," widget"),", but it's very specific to a certain kind a menu. ",Object(t.mdx)(r.a,{mdxType:"ARIA"})," menus, must\nonly contain ",Object(t.mdx)("inlineCode",{parentName:"p"},'role="menuitem"'),", ",Object(t.mdx)("inlineCode",{parentName:"p"},'role="menuitemcheckbox"'),", or ",Object(t.mdx)("inlineCode",{parentName:"p"},'role="menuitemradio"'),"."),Object(t.mdx)("p",null,"On the other hand, Bootstrap's dropdowns are designed to more generic\nand application in a variety of situations. For this reason we don't\nautomatically add the menu roles to the markup. We do implement some\nbasic keyboard navigation, and if you do provide the \"menu\" role,\nreact-bootstrap will do it's best to ensure the focus management is\ncompliant with the ",Object(t.mdx)(r.a,{mdxType:"ARIA"})," authoring guidelines for menus."),Object(t.mdx)("h2",{id:"examples"},"Examples"),Object(t.mdx)("h3",{id:"single-button-dropdowns"},"Single button dropdowns"),Object(t.mdx)("p",null,"The basic Dropdown is composed of a wrapping ",Object(t.mdx)("inlineCode",{parentName:"p"},"Dropdown")," and\ninner ",Object(t.mdx)("inlineCode",{parentName:"p"},"<DropdownMenu>"),", and ",Object(t.mdx)("inlineCode",{parentName:"p"},"<DropdownToggle>"),". By\ndefault the ",Object(t.mdx)("inlineCode",{parentName:"p"},"<DropdownToggle>")," will render a\n",Object(t.mdx)("inlineCode",{parentName:"p"},"Button")," component and accepts all the same props."),Object(t.mdx)(p.a,{codeText:m.a,mdxType:"ReactPlayground"}),Object(t.mdx)("p",null,"Since the above is such a common configuration react-bootstrap provide\nthe ",Object(t.mdx)("inlineCode",{parentName:"p"},"<DropdownButton>")," component to help reduce typing. Provide\na ",Object(t.mdx)("inlineCode",{parentName:"p"},"title")," prop and some ",Object(t.mdx)("inlineCode",{parentName:"p"},"<DropdownItem>"),"s and you're\nready to go."),Object(t.mdx)(p.a,{codeText:l.a,mdxType:"ReactPlayground"}),Object(t.mdx)("p",null,"DropdownButton will forward Button props to the underlying Toggle\ncomponent"),Object(t.mdx)(p.a,{codeText:N.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h3",{id:"split-button-dropdowns"},"Split button dropdowns"),Object(t.mdx)("p",null,"Similarly, You create a split dropdown by combining the Dropdown\ncomponents with another Button and a ButtonGroup."),Object(t.mdx)(p.a,{codeText:A.a,mdxType:"ReactPlayground"}),Object(t.mdx)("p",null,"As with DropdownButton, ",Object(t.mdx)("inlineCode",{parentName:"p"},"SplitButton")," is provided as\nconvenience component."),Object(t.mdx)(p.a,{codeText:S.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h3",{id:"sizing"},"Sizing"),Object(t.mdx)("p",null,"Dropdowns work with buttons of all sizes."),Object(t.mdx)(p.a,{codeText:y.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h2",{id:"drop-directions"},"Drop directions"),Object(t.mdx)("p",null,"Trigger dropdown menus above, below, left, or to the right of their\ntoggle elements, with the ",Object(t.mdx)("inlineCode",{parentName:"p"},"drop")," prop."),Object(t.mdx)(p.a,{codeText:x.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h2",{id:"dropdown-items"},"Dropdown items"),Object(t.mdx)("p",null,"Historically dropdown menu contents had to be links, but thatâ€™s no\nlonger the case with v4. Now you can optionally use\n",Object(t.mdx)("inlineCode",{parentName:"p"},"<button>")," elements in your dropdowns instead of just ",Object(t.mdx)("inlineCode",{parentName:"p"},"<a>"),"s."),Object(t.mdx)(p.a,{codeText:I.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h3",{id:"menu-alignment"},"Menu alignment"),Object(t.mdx)("p",null,"By default, a dropdown menu is aligned to the left, but you can switch\nit by passing the ",Object(t.mdx)("inlineCode",{parentName:"p"},"alignRight")," prop."),Object(t.mdx)(p.a,{codeText:O.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h2",{id:"menu-headers"},"Menu headers"),Object(t.mdx)("p",null,"Add a header to label sections of actions."),Object(t.mdx)(p.a,{codeText:B.a,exampleClassName:R.a.staticDropdownMenu,mdxType:"ReactPlayground"}),Object(t.mdx)("h2",{id:"menu-dividers"},"Menu dividers"),Object(t.mdx)("p",null,"Separate groups of related menu items with a divider."),Object(t.mdx)(p.a,{codeText:T.a,exampleClassName:R.a.staticDropdownMenu,mdxType:"ReactPlayground"}),Object(t.mdx)("h2",{id:"customization"},"Customization"),Object(t.mdx)("p",null,"If the default handling of the dropdown menu and toggle components\naren't to your liking, you can customize them, by using the more basic\n",Object(t.mdx)("inlineCode",{parentName:"p"},"<Dropdown>")," Component to explicitly specify the Toggle and\nMenu components"),Object(t.mdx)(p.a,{codeText:w.a,exampleClassName:R.a.customDropdownMenu,mdxType:"ReactPlayground"}),Object(t.mdx)("h3",{id:"custom-dropdown-components"},"Custom Dropdown Components"),Object(t.mdx)("p",null,"For those that want to customize everything, you can forgo the included\nToggle and Menu components, and create your own. By providing custom\ncomponents to the ",Object(t.mdx)("inlineCode",{parentName:"p"},"as")," prop, you can control how each\ncomponent behaves. Custom toggle and menu components ",Object(t.mdx)("strong",{parentName:"p"},"must")," be able to accept refs."),Object(t.mdx)(p.a,{codeText:D.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h2",{id:"api"},"API"),Object(t.mdx)(a.a,{metadata:o.data.DropdownButton,mdxType:"ComponentApi"}),Object(t.mdx)(a.a,{metadata:o.data.SplitButton,mdxType:"ComponentApi"}),Object(t.mdx)(a.a,{metadata:o.data.Dropdown,mdxType:"ComponentApi"}),Object(t.mdx)(a.a,{metadata:o.data.DropdownToggle,exportedBy:o.data.Dropdown,mdxType:"ComponentApi"}),Object(t.mdx)(a.a,{metadata:o.data.DropdownMenu,exportedBy:o.data.Dropdown,mdxType:"ComponentApi"}),Object(t.mdx)(a.a,{metadata:o.data.DropdownItem,exportedBy:o.data.Dropdown,mdxType:"ComponentApi"}),Object(t.mdx)(a.a,{metadata:o.data.DropdownHeader,exportedBy:o.data.Dropdown,mdxType:"ComponentApi"}),Object(t.mdx)(a.a,{metadata:o.data.DropdownDivider,exportedBy:o.data.Dropdown,mdxType:"ComponentApi"}))}W.isMDXComponent=!0},1126:function(n,e,o){"use strict";o.d(e,"a",function(){return r});var t=o(0),d=o.n(t);function r(){return d.a.createElement("abbr",{title:"Accessible Rich Internet Applications"},"ARIA")}},1290:function(n,e){n.exports='<Dropdown>\n  <Dropdown.Toggle variant="success" id="dropdown-basic">\n    Dropdown Button\n  </Dropdown.Toggle>\n\n  <Dropdown.Menu>\n    <Dropdown.Item href="#/action-1">Action</Dropdown.Item>\n    <Dropdown.Item href="#/action-2">Another action</Dropdown.Item>\n    <Dropdown.Item href="#/action-3">Something else</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>;\n'},1291:function(n,e){n.exports='<DropdownButton id="dropdown-basic-button" title="Dropdown button">\n  <Dropdown.Item href="#/action-1">Action</Dropdown.Item>\n  <Dropdown.Item href="#/action-2">Another action</Dropdown.Item>\n  <Dropdown.Item href="#/action-3">Something else</Dropdown.Item>\n</DropdownButton>;\n'},1292:function(n,e){n.exports='<ButtonToolbar>\n  <Dropdown>\n    <Dropdown.Toggle id="dropdown-custom-1">Pow! Zoom!</Dropdown.Toggle>\n    <Dropdown.Menu className="super-colors">\n      <Dropdown.Item eventKey="1">Action</Dropdown.Item>\n      <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n      <Dropdown.Item eventKey="3" active>\n        Active Item\n      </Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item eventKey="4">Separated link</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n\n  <Dropdown as={ButtonGroup}>\n    <Button variant="info">mix it up style-wise</Button>\n    <Dropdown.Toggle split variant="success" id="dropdown-custom-2" />\n    <Dropdown.Menu className="super-colors">\n      <Dropdown.Item eventKey="1">Action</Dropdown.Item>\n      <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n      <Dropdown.Item eventKey="3" active>\n        Active Item\n      </Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item eventKey="4">Separated link</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n</ButtonToolbar>;\n'},1293:function(n,e){n.exports='class CustomToggle extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n\n    this.props.onClick(e);\n  }\n\n  render() {\n    return (\n      <a href="" onClick={this.handleClick}>\n        {this.props.children}\n      </a>\n    );\n  }\n}\n\nclass CustomMenu extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = { value: \'\' };\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value.toLowerCase().trim() });\n  }\n\n  render() {\n    const {\n      children,\n      style,\n      className,\n      \'aria-labelledby\': labeledBy,\n    } = this.props;\n\n    const { value } = this.state;\n\n    return (\n      <div style={style} className={className} aria-labelledby={labeledBy}>\n        <FormControl\n          autoFocus\n          className="mx-3 my-2 w-auto"\n          placeholder="Type to filter..."\n          onChange={this.handleChange}\n          value={value}\n        />\n        <ul className="list-unstyled">\n          {React.Children.toArray(children).filter(\n            child =>\n              !value || child.props.children.toLowerCase().startsWith(value),\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nrender(\n  <Dropdown>\n    <Dropdown.Toggle as={CustomToggle} id="dropdown-custom-components">\n      Custom toggle\n    </Dropdown.Toggle>\n\n    <Dropdown.Menu as={CustomMenu}>\n      <Dropdown.Item eventKey="1">Red</Dropdown.Item>\n      <Dropdown.Item eventKey="2">Blue</Dropdown.Item>\n      <Dropdown.Item eventKey="3" active>\n        Orange\n      </Dropdown.Item>\n      <Dropdown.Item eventKey="1">Red-Orange</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>,\n);\n'},1294:function(n,e){n.exports='<>\n  <ButtonToolbar>\n    {[DropdownButton, SplitButton].map((DropdownType, idx) => (\n      <DropdownType\n        size="lg"\n        title="Drop small"\n        id={`dropdown-button-drop-${idx}`}\n        key={idx}\n      >\n        <Dropdown.Item eventKey="1">Action</Dropdown.Item>\n        <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey="3">Something else here</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey="4">Separated link</Dropdown.Item>\n      </DropdownType>\n    ))}\n  </ButtonToolbar>\n  <ButtonToolbar>\n    {[DropdownButton, SplitButton].map((DropdownType, idx) => (\n      <DropdownType\n        size="sm"\n        variant="secondary"\n        title="Drop small"\n        id={`dropdown-button-drop-${idx}`}\n        key={idx}\n      >\n        <Dropdown.Item eventKey="1">Action</Dropdown.Item>\n        <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey="3">Something else here</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey="4">Separated link</Dropdown.Item>\n      </DropdownType>\n    ))}\n  </ButtonToolbar>\n</>;\n'},1295:function(n,e){n.exports='<>\n  <ButtonToolbar>\n    {[\'up\', \'down\', \'left\', \'right\'].map(direction => (\n      <DropdownButton\n        drop={direction}\n        variant="secondary"\n        title={` Drop ${direction} `}\n        id={`dropdown-button-drop-${direction}`}\n        key={direction}\n      >\n        <Dropdown.Item eventKey="1">Action</Dropdown.Item>\n        <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey="3">Something else here</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey="4">Separated link</Dropdown.Item>\n      </DropdownButton>\n    ))}\n  </ButtonToolbar>\n\n  <ButtonToolbar>\n    {[\'up\', \'down\', \'left\', \'right\'].map(direction => (\n      <SplitButton\n        drop={direction}\n        variant="secondary"\n        title={`Drop ${direction}`}\n        id={`dropdown-button-drop-${direction}`}\n        key={direction}\n      >\n        <Dropdown.Item eventKey="1">Action</Dropdown.Item>\n        <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey="3">Something else here</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey="4">Separated link</Dropdown.Item>\n      </SplitButton>\n    ))}\n  </ButtonToolbar>\n</>;\n'},1296:function(n,e){n.exports='<DropdownButton id="dropdown-item-button" title="Dropdown button">\n  <Dropdown.Item as="button">Action</Dropdown.Item>\n  <Dropdown.Item as="button">Another action</Dropdown.Item>\n  <Dropdown.Item as="button">Something else</Dropdown.Item>\n</DropdownButton>;\n'},1297:function(n,e){n.exports='<DropdownButton\n  alignRight\n  title="Dropdown right"\n  id="dropdown-menu-align-right"\n>\n  <Dropdown.Item eventKey="1">Action</Dropdown.Item>\n  <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n  <Dropdown.Item eventKey="3">Something else here</Dropdown.Item>\n  <Dropdown.Divider />\n  <Dropdown.Item eventKey="4">Separated link</Dropdown.Item>\n</DropdownButton>;\n'},1298:function(n,e){n.exports='<Dropdown.Menu show>\n  <Dropdown.Item eventKey="1">Action</Dropdown.Item>\n  <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n  <Dropdown.Item eventKey="3">Something else here</Dropdown.Item>\n  <Dropdown.Divider />\n  <Dropdown.Item eventKey="4">Separated link</Dropdown.Item>\n</Dropdown.Menu>;\n'},1299:function(n,e){n.exports='<Dropdown.Menu show>\n  <Dropdown.Header>Dropdown header</Dropdown.Header>\n  <Dropdown.Item eventKey="2">Another action</Dropdown.Item>\n  <Dropdown.Item eventKey="3">Something else here</Dropdown.Item>\n</Dropdown.Menu>;\n'},1300:function(n,e){n.exports='<Dropdown as={ButtonGroup}>\n  <Button variant="success">Split Button</Button>\n\n  <Dropdown.Toggle split variant="success" id="dropdown-split-basic" />\n\n  <Dropdown.Menu>\n    <Dropdown.Item href="#/action-1">Action</Dropdown.Item>\n    <Dropdown.Item href="#/action-2">Another action</Dropdown.Item>\n    <Dropdown.Item href="#/action-3">Something else</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>;\n'},1301:function(n,e){n.exports="<ButtonToolbar>\n  {['Primary', 'Secondary', 'Success', 'Info', 'Warning', 'Danger'].map(\n    variant => (\n      <SplitButton\n        title={variant}\n        variant={variant.toLowerCase()}\n        id={`dropdown-split-variants-${variant}`}\n        key={variant}\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\" active>\n          Active Item\n        </Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </SplitButton>\n    ),\n  )}\n</ButtonToolbar>;\n"},1302:function(n,e){n.exports="<ButtonToolbar>\n  {['Primary', 'Secondary', 'Success', 'Info', 'Warning', 'Danger'].map(\n    variant => (\n      <DropdownButton\n        title={variant}\n        variant={variant.toLowerCase()}\n        id={`dropdown-variants-${variant}`}\n        key={variant}\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\" active>\n          Active Item\n        </Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </DropdownButton>\n    ),\n  )}\n</ButtonToolbar>;\n"}}]);
//# sourceMappingURL=component---src-pages-components-dropdowns-mdx-c423c08f88051efa3958.js.map