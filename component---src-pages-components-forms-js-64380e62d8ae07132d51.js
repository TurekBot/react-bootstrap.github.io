webpackJsonp(["component---src-pages-components-forms-js"],{"./node_modules/babel-loader/lib/index.js??ref--0-0!./src/pages/components/forms.js":function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0}),o.default=function(e){var o=e.data;return r.a.createElement("div",{className:"bs-docs-section"},r.a.createElement("h2",{className:"page-header"},r.a.createElement(a.a,{id:"forms"},"Forms")," ",r.a.createElement("small",null,"FormGroup, FormControl, ControlLabel")),r.a.createElement("p",null,"The ",r.a.createElement("code",null,"<FormControl>")," component renders a form control with Bootstrap styling. The ",r.a.createElement("code",null,"<FormGroup>")," component wraps a form control with proper spacing, along with support for a label, help text, and validation state. To ensure accessibility, set"," ",r.a.createElement("code",null,"controlId")," on ",r.a.createElement("code",null,"<FormGroup>"),", and use"," ",r.a.createElement("code",null,"<ControlLabel>")," for the label."),r.a.createElement(p.a,{codeText:u.a}),r.a.createElement("p",null,"The ",r.a.createElement("code",null,"<FormControl>")," component directly renders the"," ",r.a.createElement("code",null,"<input>")," or other specified component. If you need to access the value of an uncontrolled ",r.a.createElement("code",null,"<FormControl>"),", attach a ",r.a.createElement("code",null,"ref")," to it as you would with an uncontrolled input, then call ",r.a.createElement("code",null,"ReactDOM.findDOMNode(ref)")," to get the DOM node. You can then interact with that node as you would with any other uncontrolled input."),r.a.createElement("p",null,"If your application contains a large number of form groups, we recommend building a higher-level component encapsulating a complete field group that renders the label, the control, and any other necessary components. We don't provide this out-of-the-box, because the composition of those field groups is too specific to an individual application to admit a good one-size-fits-all solution."),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-props"},"Props")),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-form-group"},"FormGroup"),r.a.createElement(l.a,{component:o.FormGroup.displayName})),r.a.createElement(m.a,{metadata:o.FormGroup}),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-form-control"},"FormControl"),r.a.createElement(l.a,{component:o.FormControl.displayName})),r.a.createElement(m.a,{metadata:o.FormControl}),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-control-label"},"ControlLabel"),r.a.createElement(l.a,{component:o.ControlLabel.displayName})),r.a.createElement(m.a,{metadata:o.ControlLabel}),r.a.createElement("h2",{className:"page-header"},r.a.createElement(a.a,{id:"forms-controls"},"Supported controls")," ",r.a.createElement("small",null,"Checkbox, Radio, FormControl.Static, HelpBlock")),r.a.createElement("p",null,"Examples of standard form controls supported in an example form layout, using a custom ",r.a.createElement("code",null,"<FieldGroup>")," component. Use"," ",r.a.createElement("code",null,"<FormControl>")," for ",r.a.createElement("code",null,"<input>"),","," ",r.a.createElement("code",null,"<textarea>"),", and ",r.a.createElement("code",null,"<select>"),". Use"," ",r.a.createElement("code",null,"<Checkbox>")," and ",r.a.createElement("code",null,"<Radio>")," for checkboxes and radios respectively, optionally with ",r.a.createElement("code",null,"inline")," to render multiple on the same line. Use ",r.a.createElement("code",null,"<FormControl.Static>")," for static text."),r.a.createElement(p.a,{codeText:i.a}),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-controls-props"},"Props")),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-checkbox"},"Checkbox"),r.a.createElement(l.a,{component:o.Checkbox.displayName})),r.a.createElement(m.a,{metadata:o.Checkbox}),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-radio"},"Radio"),r.a.createElement(l.a,{component:o.Radio.displayName})),r.a.createElement(m.a,{metadata:o.Radio}),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-form-control-static"},"FormControl.Static"),r.a.createElement(l.a,{component:o.FormControlStatic.displayName})),r.a.createElement(m.a,{metadata:o.FormControlStatic}),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-help-block"},"HelpBlock"),r.a.createElement(l.a,{component:o.HelpBlock.displayName})),r.a.createElement(m.a,{metadata:o.HelpBlock}),r.a.createElement("h2",{className:"page-header"},r.a.createElement(a.a,{id:"forms-layout"},"Form layout")," ",r.a.createElement("small",null,"Form")),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-inline"},"Inline forms")),r.a.createElement("p",null,"Use ",r.a.createElement("code",null,"<Form inline>")," instead of ",r.a.createElement("code",null,"<form>"),". JSX strips whitespace between lines, so you will need to manually add spaces. Additionally, Bootstrap assigns inline form controls"," ",r.a.createElement("code",null,"width: auto")," by default, so you may need to set custom widths."),r.a.createElement(p.a,{codeText:F.a}),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-horizontal"},"Horizontal forms")),r.a.createElement("p",null,"Use ",r.a.createElement("code",null,"<Form horizontal>")," instead of"," ",r.a.createElement("code",null,"<form>"),", then use ",r.a.createElement("code",null,"<Col>"),"s to align labels and controls. Do not use ",r.a.createElement("code",null,"<Row>")," here, as"," ",r.a.createElement("code",null,"<FormGroup>")," will already serve as a grid row in a horizontal form."),r.a.createElement(p.a,{codeText:h.a}),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-layout-props"},"Props")),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-form"},"Form"),r.a.createElement(l.a,{component:o.Form.displayName}),r.a.createElement("small",null,"(only needed for horizontal or inline forms)")),r.a.createElement(m.a,{metadata:o.Form}),r.a.createElement("h2",{className:"page-header"},r.a.createElement(a.a,{id:"forms-input-groups"},"Input groups"),r.a.createElement("small",null,"InputGroup, InputGroup.Addon, InputGroup.Button")),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-input-addons"},"Input add-ons")),r.a.createElement("p",null,"Wrap your form control in an ",r.a.createElement("code",null,"<InputGroup>"),", then use for normal add-ons and for button add-ons. Exotic configurations may require CSS on your side."),r.a.createElement(p.a,{codeText:b.a}),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-input-sizes"},"Input sizes")),r.a.createElement("p",null,"Use ",r.a.createElement("code",null,"bsSize")," on ",r.a.createElement("code",null,"<FormGroup>")," or"," ",r.a.createElement("code",null,"<InputGroup>")," to change the size of inputs. It also works with add-ons and most other options."),r.a.createElement(p.a,{codeText:G.a}),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-input-groups-props"},"Props")),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-input-group"},"InputGroup"),r.a.createElement(l.a,{component:o.InputGroup.displayName})),r.a.createElement(m.a,{metadata:o.InputGroup}),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-input-group-addon"},"InputGroup.Addon"),r.a.createElement(l.a,{component:o.InputGroupAddon.displayName})),r.a.createElement(m.a,{metadata:o.InputGroupAddon}),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-input-group-button"},"InputGroup.Button"),r.a.createElement(l.a,{component:o.InputGroupButton.displayName})),r.a.createElement(m.a,{metadata:o.InputGroupButton}),r.a.createElement("h2",{className:"page-header"},r.a.createElement(a.a,{id:"forms-validation"},"Validation states"),r.a.createElement("small",null,"FormControl.Feedback")),r.a.createElement("p",null,"Set ",r.a.createElement("code",null,"validationState")," to one of ",r.a.createElement("code",null,"'success'"),","," ",r.a.createElement("code",null,"'warning'")," or ",r.a.createElement("code",null,"'error'")," to show validation state. Set ",r.a.createElement("code",null,"validationState")," to ",r.a.createElement("code",null,"null")," (or"," ",r.a.createElement("code",null,"undefined"),") to hide validation state. Add"," ",r.a.createElement("code",null,"<FormControl.Feedback>")," for a feedback icon when validation state is set."),r.a.createElement(p.a,{codeText:I.a}),r.a.createElement("h3",null,r.a.createElement(a.a,{id:"forms-validation-props"},"Props")),r.a.createElement("h4",null,r.a.createElement(a.a,{id:"forms-props-form-control-feedback"},"FormControl.Feedback"),r.a.createElement(l.a,{component:o.FormControlFeedback.displayName})),r.a.createElement(m.a,{metadata:o.FormControlFeedback}))},n.d(o,"query",function(){return y});var t=n("./node_modules/react/react.js"),r=n.n(t),a=n("./src/components/Anchor.js"),l=n("./src/components/LinkToSource.js"),m=n("./src/components/PropTable.js"),p=n("./src/components/ReactPlayground.js"),c=n("./src/examples/FormBasic.js"),u=n.n(c),s=n("./src/examples/FormControls.js"),i=n.n(s),d=n("./src/examples/FormInline.js"),F=n.n(d),C=n("./src/examples/FormHorizontal.js"),h=n.n(C),E=n("./src/examples/FormInputSizes.js"),G=n.n(E),f=n("./src/examples/FormInputAddons.js"),b=n.n(f),x=n("./src/examples/FormValidation.js"),I=n.n(x);var y="** extracted graphql fragment **"},"./src/examples/FormBasic.js":function(e,o){e.exports="class FormExample extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: ''\n    };\n  }\n\n  getValidationState() {\n    const length = this.state.value.length;\n    if (length > 10) return 'success';\n    else if (length > 5) return 'warning';\n    else if (length > 0) return 'error';\n    return null;\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  render() {\n    return (\n      <form>\n        <FormGroup\n          controlId=\"formBasicText\"\n          validationState={this.getValidationState()}\n        >\n          <ControlLabel>Working example with validation</ControlLabel>\n          <FormControl\n            type=\"text\"\n            value={this.state.value}\n            placeholder=\"Enter text\"\n            onChange={this.handleChange}\n          />\n          <FormControl.Feedback />\n          <HelpBlock>Validation is based on string length.</HelpBlock>\n        </FormGroup>\n      </form>\n    );\n  }\n}\n\nrender(<FormExample />);\n"},"./src/examples/FormControls.js":function(e,o){e.exports='function FieldGroup({ id, label, help, ...props }) {\n  return (\n    <FormGroup controlId={id}>\n      <ControlLabel>{label}</ControlLabel>\n      <FormControl {...props} />\n      {help && <HelpBlock>{help}</HelpBlock>}\n    </FormGroup>\n  );\n}\n\nconst formInstance = (\n  <form>\n    <FieldGroup\n      id="formControlsText"\n      type="text"\n      label="Text"\n      placeholder="Enter text"\n    />\n    <FieldGroup\n      id="formControlsEmail"\n      type="email"\n      label="Email address"\n      placeholder="Enter email"\n    />\n    <FieldGroup id="formControlsPassword" label="Password" type="password" />\n    <FieldGroup\n      id="formControlsFile"\n      type="file"\n      label="File"\n      help="Example block-level help text here."\n    />\n\n    <Checkbox checked readOnly>\n      Checkbox\n    </Checkbox>\n    <Radio checked readOnly>\n      Radio\n    </Radio>\n\n    <FormGroup>\n      <Checkbox inline>1</Checkbox> <Checkbox inline>2</Checkbox>{\' \'}\n      <Checkbox inline>3</Checkbox>\n    </FormGroup>\n    <FormGroup>\n      <Radio name="radioGroup" inline>\n        1\n      </Radio>{\' \'}\n      <Radio name="radioGroup" inline>\n        2\n      </Radio>{\' \'}\n      <Radio name="radioGroup" inline>\n        3\n      </Radio>\n    </FormGroup>\n\n    <FormGroup controlId="formControlsSelect">\n      <ControlLabel>Select</ControlLabel>\n      <FormControl componentClass="select" placeholder="select">\n        <option value="select">select</option>\n        <option value="other">...</option>\n      </FormControl>\n    </FormGroup>\n    <FormGroup controlId="formControlsSelectMultiple">\n      <ControlLabel>Multiple select</ControlLabel>\n      <FormControl componentClass="select" multiple>\n        <option value="select">select (multiple)</option>\n        <option value="other">...</option>\n      </FormControl>\n    </FormGroup>\n\n    <FormGroup controlId="formControlsTextarea">\n      <ControlLabel>Textarea</ControlLabel>\n      <FormControl componentClass="textarea" placeholder="textarea" />\n    </FormGroup>\n\n    <FormGroup>\n      <ControlLabel>Static text</ControlLabel>\n      <FormControl.Static>email@example.com</FormControl.Static>\n    </FormGroup>\n\n    <Button type="submit">Submit</Button>\n  </form>\n);\n\nrender(formInstance);\n'},"./src/examples/FormHorizontal.js":function(e,o){e.exports='<Form horizontal>\n  <FormGroup controlId="formHorizontalEmail">\n    <Col componentClass={ControlLabel} sm={2}>\n      Email\n    </Col>\n    <Col sm={10}>\n      <FormControl type="email" placeholder="Email" />\n    </Col>\n  </FormGroup>\n\n  <FormGroup controlId="formHorizontalPassword">\n    <Col componentClass={ControlLabel} sm={2}>\n      Password\n    </Col>\n    <Col sm={10}>\n      <FormControl type="password" placeholder="Password" />\n    </Col>\n  </FormGroup>\n\n  <FormGroup>\n    <Col smOffset={2} sm={10}>\n      <Checkbox>Remember me</Checkbox>\n    </Col>\n  </FormGroup>\n\n  <FormGroup>\n    <Col smOffset={2} sm={10}>\n      <Button type="submit">Sign in</Button>\n    </Col>\n  </FormGroup>\n</Form>;\n'},"./src/examples/FormInline.js":function(e,o){e.exports='<Form inline>\n  <FormGroup controlId="formInlineName">\n    <ControlLabel>Name</ControlLabel>{\' \'}\n    <FormControl type="text" placeholder="Jane Doe" />\n  </FormGroup>{\' \'}\n  <FormGroup controlId="formInlineEmail">\n    <ControlLabel>Email</ControlLabel>{\' \'}\n    <FormControl type="email" placeholder="jane.doe@example.com" />\n  </FormGroup>{\' \'}\n  <Button type="submit">Send invitation</Button>\n</Form>;\n'},"./src/examples/FormInputAddons.js":function(e,o){e.exports='<form>\n  <FormGroup>\n    <InputGroup>\n      <InputGroup.Addon>@</InputGroup.Addon>\n      <FormControl type="text" />\n    </InputGroup>\n  </FormGroup>\n  <FormGroup>\n    <InputGroup>\n      <FormControl type="text" />\n      <InputGroup.Addon>.00</InputGroup.Addon>\n    </InputGroup>\n  </FormGroup>\n  <FormGroup>\n    <InputGroup>\n      <InputGroup.Addon>$</InputGroup.Addon>\n      <FormControl type="text" />\n      <InputGroup.Addon>.00</InputGroup.Addon>\n    </InputGroup>\n  </FormGroup>\n\n  <FormGroup>\n    <InputGroup>\n      <FormControl type="text" />\n      <InputGroup.Addon>\n        <Glyphicon glyph="music" />\n      </InputGroup.Addon>\n    </InputGroup>\n  </FormGroup>\n\n  <FormGroup>\n    <InputGroup>\n      <InputGroup.Button>\n        <Button>Before</Button>\n      </InputGroup.Button>\n      <FormControl type="text" />\n    </InputGroup>\n  </FormGroup>\n  <FormGroup>\n    <InputGroup>\n      <FormControl type="text" />\n      <DropdownButton\n        componentClass={InputGroup.Button}\n        id="input-dropdown-addon"\n        title="Action"\n      >\n        <MenuItem key="1">Item</MenuItem>\n      </DropdownButton>\n    </InputGroup>\n  </FormGroup>\n\n  <FormGroup>\n    <InputGroup>\n      <InputGroup.Addon>\n        <input type="radio" aria-label="..." />\n      </InputGroup.Addon>\n      <FormControl type="text" />\n    </InputGroup>\n  </FormGroup>\n  <FormGroup>\n    <InputGroup>\n      <InputGroup.Addon>\n        <input type="checkbox" aria-label="..." />\n      </InputGroup.Addon>\n      <FormControl type="text" />\n    </InputGroup>\n  </FormGroup>\n</form>;\n'},"./src/examples/FormInputSizes.js":function(e,o){e.exports='<form>\n  <FormGroup bsSize="large">\n    <FormControl type="text" placeholder="Large text" />\n  </FormGroup>\n  <FormGroup>\n    <FormControl type="text" placeholder="Normal text" />\n  </FormGroup>\n  <FormGroup bsSize="small">\n    <FormControl type="text" placeholder="Small text" />\n  </FormGroup>\n</form>;\n'},"./src/examples/FormValidation.js":function(e,o){e.exports='<form>\n  <FormGroup controlId="formValidationSuccess1" validationState="success">\n    <ControlLabel>Input with success</ControlLabel>\n    <FormControl type="text" />\n    <HelpBlock>Help text with validation state.</HelpBlock>\n  </FormGroup>\n\n  <FormGroup controlId="formValidationWarning1" validationState="warning">\n    <ControlLabel>Input with warning</ControlLabel>\n    <FormControl type="text" />\n  </FormGroup>\n\n  <FormGroup controlId="formValidationError1" validationState="error">\n    <ControlLabel>Input with error</ControlLabel>\n    <FormControl type="text" />\n  </FormGroup>\n\n  <FormGroup controlId="formValidationNull" validationState={null}>\n    <ControlLabel>Input with no validation state</ControlLabel>\n    <FormControl type="text" />\n  </FormGroup>\n\n  <FormGroup controlId="formValidationSuccess2" validationState="success">\n    <ControlLabel>Input with success and feedback icon</ControlLabel>\n    <FormControl type="text" />\n    <FormControl.Feedback />\n  </FormGroup>\n\n  <FormGroup controlId="formValidationWarning2" validationState="warning">\n    <ControlLabel>Input with warning and feedback icon</ControlLabel>\n    <FormControl type="text" />\n    <FormControl.Feedback />\n  </FormGroup>\n\n  <FormGroup controlId="formValidationError2" validationState="error">\n    <ControlLabel>Input with error and feedback icon</ControlLabel>\n    <FormControl type="text" />\n    <FormControl.Feedback />\n  </FormGroup>\n\n  <FormGroup controlId="formValidationSuccess3" validationState="success">\n    <ControlLabel>Input with success and custom feedback icon</ControlLabel>\n    <FormControl type="text" />\n    <FormControl.Feedback>\n      <Glyphicon glyph="music" />\n    </FormControl.Feedback>\n  </FormGroup>\n\n  <FormGroup controlId="formValidationWarning3" validationState="warning">\n    <ControlLabel>Input group with warning</ControlLabel>\n    <InputGroup>\n      <InputGroup.Addon>@</InputGroup.Addon>\n      <FormControl type="text" />\n    </InputGroup>\n    <FormControl.Feedback />\n  </FormGroup>\n\n  <Form componentClass="fieldset" horizontal>\n    <FormGroup controlId="formValidationError3" validationState="error">\n      <Col componentClass={ControlLabel} xs={3}>\n        Input with error\n      </Col>\n      <Col xs={9}>\n        <FormControl type="text" />\n        <FormControl.Feedback />\n      </Col>\n    </FormGroup>\n\n    <FormGroup controlId="formValidationSuccess4" validationState="success">\n      <Col componentClass={ControlLabel} xs={3}>\n        Input group with success\n      </Col>\n      <Col xs={9}>\n        <InputGroup>\n          <InputGroup.Addon>@</InputGroup.Addon>\n          <FormControl type="text" />\n        </InputGroup>\n        <FormControl.Feedback />\n      </Col>\n    </FormGroup>\n  </Form>\n\n  <Form componentClass="fieldset" inline>\n    <FormGroup controlId="formValidationWarning4" validationState="warning">\n      <ControlLabel>Input with warning</ControlLabel>{\' \'}\n      <FormControl type="text" />\n      <FormControl.Feedback />\n    </FormGroup>{\' \'}\n    <FormGroup controlId="formValidationError4" validationState="error">\n      <ControlLabel>Input group with error</ControlLabel>{\' \'}\n      <InputGroup>\n        <InputGroup.Addon>@</InputGroup.Addon>\n        <FormControl type="text" />\n      </InputGroup>\n      <FormControl.Feedback />\n    </FormGroup>\n  </Form>\n\n  <Checkbox validationState="success">Checkbox with success</Checkbox>\n  <Radio validationState="warning">Radio with warning</Radio>\n  <Checkbox validationState="error">Checkbox with error</Checkbox>\n\n  {/* This requires React 15\'s <span>-less spaces to be exactly correct. */}\n  <FormGroup validationState="success">\n    <Checkbox inline>Checkbox</Checkbox> <Checkbox inline>with</Checkbox>{\' \'}\n    <Checkbox inline>success</Checkbox>\n  </FormGroup>\n</form>;\n'}});
//# sourceMappingURL=component---src-pages-components-forms-js-64380e62d8ae07132d51.js.map