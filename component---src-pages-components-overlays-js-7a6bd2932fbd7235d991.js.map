{"version":3,"sources":["webpack:///component---src-pages-components-overlays-js-7a6bd2932fbd7235d991.js","webpack:///./src/examples/Overlay.js","webpack:///./src/examples/OverlayCustom.js","webpack:///./src/pages/components/overlays.js"],"names":["webpackJsonp","455","module","exports","456","523","__webpack_require__","_interopRequireDefault","obj","__esModule","default","OverlaySection","_ref","data","_react2","createElement","className","_Anchor2","id","_ReactPlayground2","codeText","_Overlay2","_OverlayCustom2","_LinkToSource2","component","Overlay","displayName","_PropTable2","metadata","query","undefined","_react","_Anchor","_LinkToSource","_PropTable","_ReactPlayground","_Overlay","_OverlayCustom"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GAEvB,YCLDD,GAAOC,QAAU,q6CDWXC,IACA,SAAUF,EAAQC,GAEvB,YEdDD,GAAOC,QAAU,g1CFoBXE,IACA,SAAUH,EAAQC,EAASG,GAEhC,YAkCA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GG/CzE,QAASG,GAATC,GAAkC,GAARC,GAAQD,EAARC,IACvC,OACEC,GAAAJ,QAAAK,cAAA,OAAKC,UAAU,mBACbF,EAAAJ,QAAAK,cAAA,MAAIC,UAAU,eACZF,EAAAJ,QAAAK,cAAAE,EAAAP,SAAQQ,GAAG,mBAAX,mBAAsD,IACtDJ,EAAAJ,QAAAK,cAAA,yBAGFD,EAAAJ,QAAAK,cAAA,gBACMD,EAAAJ,QAAAK,cAAA,8BADN,0PAIiE,IAC/DD,EAAAJ,QAAAK,cAAA,uBALF,wBAOAD,EAAAJ,QAAAK,cAAAI,EAAAT,SAAiBU,SAAAC,EAAAX,UAEjBI,EAAAJ,QAAAK,cAAA,UACED,EAAAJ,QAAAK,cAAAE,EAAAP,SAAQQ,GAAG,2BAAX,+CAIFJ,EAAAJ,QAAAK,cAAA,+CACqCD,EAAAJ,QAAAK,cAAA,uBADrC,MAC6D,IAC3DD,EAAAJ,QAAAK,cAAA,uBAFF,kFAG6BD,EAAAJ,QAAAK,cAAA,uBAH7B,eAKAD,EAAAJ,QAAAK,cAAAI,EAAAT,SAAiBU,SAAAE,EAAAZ,UAEjBI,EAAAJ,QAAAK,cAAA,UACED,EAAAJ,QAAAK,cAAAE,EAAAP,SAAQQ,GAAG,yBAAX,SACAJ,EAAAJ,QAAAK,cAAAQ,EAAAb,SAAcc,UAAWX,EAAKY,QAAQC,eAExCZ,EAAAJ,QAAAK,cAAAY,EAAAjB,SAAWkB,SAAUf,EAAKY,WHlB/BtB,EAAQM,YAAa,EACrBN,EAAQ0B,MAAQC,OAChB3B,EAAQO,QGjBeC,CAVxB,IAAAoB,GAAAzB,EAAA,GH+BKQ,EAAUP,EAAuBwB,GG7BtCC,EAAA1B,EAAA,IHiCKW,EAAWV,EAAuByB,GGhCvCC,EAAA3B,EAAA,IHoCKiB,EAAiBhB,EAAuB0B,GGnC7CC,EAAA5B,EAAA,IHuCKqB,EAAcpB,EAAuB2B,GGtC1CC,EAAA7B,EAAA,IH0CKa,EAAoBZ,EAAuB4B,GGxChDC,EAAA9B,EAAA,KH4CKe,EAAYd,EAAuB6B,GG3CxCC,EAAA/B,EAAA,KH+CKgB,EAAkBf,EAAuB8B,EGPjCR","file":"component---src-pages-components-overlays-js-7a6bd2932fbd7235d991.js","sourcesContent":["webpackJsonp([74086763614190],{\n\n/***/ 455:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"class Example extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.getTarget = this.getTarget.bind(this);\\n    this.handleToggle = this.handleToggle.bind(this);\\n\\n    this.state = {\\n      show: true\\n    };\\n  }\\n\\n  getTarget() {\\n    return ReactDOM.findDOMNode(this.target);\\n  }\\n\\n  handleToggle() {\\n    this.setState({ show: !this.state.show });\\n  }\\n\\n  render() {\\n    const sharedProps = {\\n      container: this,\\n      target: this.getTarget,\\n      show: this.state.show\\n    };\\n\\n    return (\\n      <div style={{ height: 100, paddingLeft: 150, position: 'relative' }}>\\n        <Button\\n          ref={button => {\\n            this.target = button;\\n          }}\\n          onClick={this.handleToggle}\\n        >\\n          Click me!\\n        </Button>\\n\\n        <Overlay {...sharedProps} placement=\\\"left\\\">\\n          <Tooltip id=\\\"overload-left\\\">Tooltip overload!</Tooltip>\\n        </Overlay>\\n        <Overlay {...sharedProps} placement=\\\"top\\\">\\n          <Tooltip id=\\\"overload-top\\\">Tooltip overload!</Tooltip>\\n        </Overlay>\\n        <Overlay {...sharedProps} placement=\\\"right\\\">\\n          <Tooltip id=\\\"overload-right\\\">Tooltip overload!</Tooltip>\\n        </Overlay>\\n        <Overlay {...sharedProps} placement=\\\"bottom\\\">\\n          <Tooltip id=\\\"overload-bottom\\\">Tooltip overload!</Tooltip>\\n        </Overlay>\\n      </div>\\n    );\\n  }\\n}\\n\\nrender(<Example />);\\n\";\n\n/***/ }),\n\n/***/ 456:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"function CustomPopover({ style }) {\\n  return (\\n    <div\\n      style={{\\n        ...style,\\n        position: 'absolute',\\n        backgroundColor: '#EEE',\\n        boxShadow: '0 5px 10px rgba(0, 0, 0, 0.2)',\\n        border: '1px solid #CCC',\\n        borderRadius: 3,\\n        marginLeft: -5,\\n        marginTop: 5,\\n        padding: 10\\n      }}\\n    >\\n      <strong>Holy guacamole!</strong> Check this info.\\n    </div>\\n  );\\n}\\n\\nclass Example extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.handleToggle = this.handleToggle.bind(this);\\n\\n    this.state = {\\n      show: true\\n    };\\n  }\\n\\n  handleToggle() {\\n    this.setState({ show: !this.state.show });\\n  }\\n\\n  render() {\\n    return (\\n      <div style={{ height: 100, position: 'relative' }}>\\n        <Button\\n          ref={button => {\\n            this.target = button;\\n          }}\\n          onClick={this.handleToggle}\\n        >\\n          I am an Overlay target\\n        </Button>\\n\\n        <Overlay\\n          show={this.state.show}\\n          onHide={() => this.setState({ show: false })}\\n          placement=\\\"right\\\"\\n          container={this}\\n          target={() => ReactDOM.findDOMNode(this.target)}\\n        >\\n          <CustomPopover />\\n        </Overlay>\\n      </div>\\n    );\\n  }\\n}\\n\\nrender(<Example />);\\n\";\n\n/***/ }),\n\n/***/ 523:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.query = undefined;\n\texports.default = OverlaySection;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Anchor = __webpack_require__(12);\n\t\n\tvar _Anchor2 = _interopRequireDefault(_Anchor);\n\t\n\tvar _LinkToSource = __webpack_require__(17);\n\t\n\tvar _LinkToSource2 = _interopRequireDefault(_LinkToSource);\n\t\n\tvar _PropTable = __webpack_require__(14);\n\t\n\tvar _PropTable2 = _interopRequireDefault(_PropTable);\n\t\n\tvar _ReactPlayground = __webpack_require__(13);\n\t\n\tvar _ReactPlayground2 = _interopRequireDefault(_ReactPlayground);\n\t\n\tvar _Overlay = __webpack_require__(455);\n\t\n\tvar _Overlay2 = _interopRequireDefault(_Overlay);\n\t\n\tvar _OverlayCustom = __webpack_require__(456);\n\t\n\tvar _OverlayCustom2 = _interopRequireDefault(_OverlayCustom);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction OverlaySection(_ref) {\n\t  var data = _ref.data;\n\t\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: 'bs-docs-section' },\n\t    _react2.default.createElement(\n\t      'h2',\n\t      { className: 'page-header' },\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'custom-overlays' },\n\t        'Custom overlays'\n\t      ),\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'small',\n\t        null,\n\t        'Overlay'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'OverlayTrigger'\n\t      ),\n\t      ' component is great for most use cases, but as a higher level abstraction it can lack the flexibility needed to build more nuanced or custom behaviors into your Overlay components. For these cases it can be helpful to forgo the trigger and use the',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'Overlay'\n\t      ),\n\t      ' component directly.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _Overlay2.default }),\n\t    _react2.default.createElement(\n\t      'h4',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'custom-overlays-overlay' },\n\t        'Use Overlay instead of Tooltip and Popover'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'You don\\'t need to use the provided ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'Tooltip'\n\t      ),\n\t      ' or',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'Popover'\n\t      ),\n\t      ' components. Creating custom overlays is as easy as wrapping some markup in an ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'Overlay'\n\t      ),\n\t      ' component.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _OverlayCustom2.default }),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'custom-overlays-props' },\n\t        'Props'\n\t      ),\n\t      _react2.default.createElement(_LinkToSource2.default, { component: data.Overlay.displayName })\n\t    ),\n\t    _react2.default.createElement(_PropTable2.default, { metadata: data.Overlay })\n\t  );\n\t}\n\t\n\tvar query = exports.query = '** extracted graphql fragment **';\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-components-overlays-js-7a6bd2932fbd7235d991.js","module.exports = \"class Example extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.getTarget = this.getTarget.bind(this);\\n    this.handleToggle = this.handleToggle.bind(this);\\n\\n    this.state = {\\n      show: true\\n    };\\n  }\\n\\n  getTarget() {\\n    return ReactDOM.findDOMNode(this.target);\\n  }\\n\\n  handleToggle() {\\n    this.setState({ show: !this.state.show });\\n  }\\n\\n  render() {\\n    const sharedProps = {\\n      container: this,\\n      target: this.getTarget,\\n      show: this.state.show\\n    };\\n\\n    return (\\n      <div style={{ height: 100, paddingLeft: 150, position: 'relative' }}>\\n        <Button\\n          ref={button => {\\n            this.target = button;\\n          }}\\n          onClick={this.handleToggle}\\n        >\\n          Click me!\\n        </Button>\\n\\n        <Overlay {...sharedProps} placement=\\\"left\\\">\\n          <Tooltip id=\\\"overload-left\\\">Tooltip overload!</Tooltip>\\n        </Overlay>\\n        <Overlay {...sharedProps} placement=\\\"top\\\">\\n          <Tooltip id=\\\"overload-top\\\">Tooltip overload!</Tooltip>\\n        </Overlay>\\n        <Overlay {...sharedProps} placement=\\\"right\\\">\\n          <Tooltip id=\\\"overload-right\\\">Tooltip overload!</Tooltip>\\n        </Overlay>\\n        <Overlay {...sharedProps} placement=\\\"bottom\\\">\\n          <Tooltip id=\\\"overload-bottom\\\">Tooltip overload!</Tooltip>\\n        </Overlay>\\n      </div>\\n    );\\n  }\\n}\\n\\nrender(<Example />);\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/Overlay.js","module.exports = \"function CustomPopover({ style }) {\\n  return (\\n    <div\\n      style={{\\n        ...style,\\n        position: 'absolute',\\n        backgroundColor: '#EEE',\\n        boxShadow: '0 5px 10px rgba(0, 0, 0, 0.2)',\\n        border: '1px solid #CCC',\\n        borderRadius: 3,\\n        marginLeft: -5,\\n        marginTop: 5,\\n        padding: 10\\n      }}\\n    >\\n      <strong>Holy guacamole!</strong> Check this info.\\n    </div>\\n  );\\n}\\n\\nclass Example extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.handleToggle = this.handleToggle.bind(this);\\n\\n    this.state = {\\n      show: true\\n    };\\n  }\\n\\n  handleToggle() {\\n    this.setState({ show: !this.state.show });\\n  }\\n\\n  render() {\\n    return (\\n      <div style={{ height: 100, position: 'relative' }}>\\n        <Button\\n          ref={button => {\\n            this.target = button;\\n          }}\\n          onClick={this.handleToggle}\\n        >\\n          I am an Overlay target\\n        </Button>\\n\\n        <Overlay\\n          show={this.state.show}\\n          onHide={() => this.setState({ show: false })}\\n          placement=\\\"right\\\"\\n          container={this}\\n          target={() => ReactDOM.findDOMNode(this.target)}\\n        >\\n          <CustomPopover />\\n        </Overlay>\\n      </div>\\n    );\\n  }\\n}\\n\\nrender(<Example />);\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/OverlayCustom.js","import React from 'react';\n\nimport Anchor from '../../components/Anchor';\nimport LinkToSource from '../../components/LinkToSource';\nimport PropTable from '../../components/PropTable';\nimport ReactPlayground from '../../components/ReactPlayground';\n\nimport Overlay from '../../examples/Overlay';\nimport OverlayCustom from '../../examples/OverlayCustom';\n\nexport default function OverlaySection({ data }) {\n  return (\n    <div className=\"bs-docs-section\">\n      <h2 className=\"page-header\">\n        <Anchor id=\"custom-overlays\">Custom overlays</Anchor>{' '}\n        <small>Overlay</small>\n      </h2>\n\n      <p>\n        The <code>OverlayTrigger</code> component is great for most use cases,\n        but as a higher level abstraction it can lack the flexibility needed to\n        build more nuanced or custom behaviors into your Overlay components. For\n        these cases it can be helpful to forgo the trigger and use the{' '}\n        <code>Overlay</code> component directly.\n      </p>\n      <ReactPlayground codeText={Overlay} />\n\n      <h4>\n        <Anchor id=\"custom-overlays-overlay\">\n          Use Overlay instead of Tooltip and Popover\n        </Anchor>\n      </h4>\n      <p>\n        You don't need to use the provided <code>Tooltip</code> or{' '}\n        <code>Popover</code> components. Creating custom overlays is as easy as\n        wrapping some markup in an <code>Overlay</code> component.\n      </p>\n      <ReactPlayground codeText={OverlayCustom} />\n\n      <h3>\n        <Anchor id=\"custom-overlays-props\">Props</Anchor>\n        <LinkToSource component={data.Overlay.displayName} />\n      </h3>\n      <PropTable metadata={data.Overlay} />\n    </div>\n  );\n}\n\nexport const query = graphql`\n  query OverlayQuery {\n    Overlay: componentMetadata(displayName: { eq: \"Overlay\" }) {\n      ...PropTable_metadata\n    }\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/components/overlays.js"],"sourceRoot":""}