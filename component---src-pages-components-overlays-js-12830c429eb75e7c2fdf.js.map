{"version":3,"sources":["webpack:///./src/pages/components/overlays.js","webpack:///./src/examples/Overlays/Overlay.js","webpack:///./src/examples/Overlays/Disabled.js","webpack:///./src/examples/Overlays/ScheduleUpdate.js","webpack:///./src/examples/Overlays/OverlayTrigger.js","webpack:///./src/examples/Overlays/TooltipInCopy.js","webpack:///./src/examples/Overlays/TooltipOverlay.js","webpack:///./src/examples/Overlays/TooltipPositioned.js","webpack:///./src/examples/Overlays/PopoverBasic.js","webpack:///./src/examples/Overlays/PopoverContained.js","webpack:///./src/examples/Overlays/PopoverPositioned.js"],"names":["styles","require","withLayout","data","h","id","className","href","codeText","Overlay","OverlayTrigger","TooltipInCopy","showCode","TooltipOverlay","TooltipPositioned","PopoverBasic","PopoverPositioned","Disabled","PopoverContained","exampleClassName","contained","ScheduleUpdate","metadata","Tooltip","Popover","PopoverContent","PopoverTitle","query","module","exports"],"mappings":"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","file":"component---src-pages-components-overlays-js-12830c429eb75e7c2fdf.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\n\n\nimport LinkedHeading from '../../components/LinkedHeading';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\n\nimport Overlay from '../../examples/Overlays/Overlay';\nimport Disabled from '../../examples/Overlays/Disabled';\nimport ScheduleUpdate from '../../examples/Overlays/ScheduleUpdate';\nimport OverlayTrigger from '../../examples/Overlays/OverlayTrigger';\nimport TooltipInCopy from '../../examples/Overlays/TooltipInCopy';\nimport TooltipOverlay from '../../examples/Overlays/TooltipOverlay';\nimport TooltipPositioned from '../../examples/Overlays/TooltipPositioned';\n\nimport PopoverBasic from '../../examples/Overlays/PopoverBasic';\nimport PopoverContained from '../../examples/Overlays/PopoverContained';\nimport PopoverPositioned from '../../examples/Overlays/PopoverPositioned';\n\nimport withLayout from '../../withLayout';\n\nconst styles = require('./overlays-styles.module.scss');\n\nexport default withLayout(function TooltipSection({ data }) {\n  return (\n    <>\n      <LinkedHeading h=\"1\" id=\"overlays\">\n        Overlays\n      </LinkedHeading>\n      <p className=\"lead\">\n        A set of components for positioning beautiful overlays, tooltips,\n        popovers, and anything else you need.\n      </p>\n\n      <LinkedHeading h=\"2\" id=\"overlays-overview\">\n        Overview\n      </LinkedHeading>\n\n      <p>Things to know about the react-boostrap Overlay components.</p>\n      <ul>\n        <li>\n          Overlays rely on a 3rd party library{' '}\n          <a href=\"https://github.com/FezVrasta/react-popper\">react-popper</a>,\n          a tiny react wrapper around{' '}\n          <a href=\"https://popper.js.org/\">Popper.js</a>. It's include\n          automatically with react-bootstrap, but you should reference the API\n          for more advanced use-cases.\n        </li>\n        <li>\n          The <code>{'<Tooltip>'}</code> and <code>{'<Popover>'}</code>{' '}\n          components do not position themselves. Instead the{' '}\n          <code>{'<Overlay>'}</code> (or <code>{'<OverlayTrigger>'}</code>)\n          components, inject <code>ref</code> and <code>style</code> props.\n        </li>\n        <li>\n          Tooltip expects specific props injected by the{' '}\n          <code>{'<Overlay>'}</code> component\n        </li>\n        <li>\n          Tooltips for <code>disabled</code> elements must be triggered on a\n          wrapper element.\n        </li>\n      </ul>\n\n      <LinkedHeading h=\"2\" id=\"overlays\">\n        Overlay\n      </LinkedHeading>\n      <p>\n        <code>Overlay</code> is the fundamental component for positioning and\n        controlling tooltip visibility. It's a wrapper around react-popper, that\n        adds support for transitions, and visibility toggling.\n      </p>\n\n      <LinkedHeading h=\"3\" id=\"creating-an-overlay\">\n        Creating an Overlay\n      </LinkedHeading>\n      <p>\n        Overlays consist of at least two elements, the \"overlay\", the element to\n        be positioned, as well as a \"target\", the element the overlay is\n        positioned in relation to. You can also also have an \"arrow\" element,\n        like the tooltips and popovers, but that is optional. Be sure to{' '}\n        <strong>\n          check out the{' '}\n          <a href=\"https://github.com/FezVrasta/react-popper#api-documentation\">\n            react-popper\n          </a>{' '}\n          documentation for more details about the injected props.\n        </strong>\n      </p>\n      <ReactPlayground codeText={Overlay} />\n\n      <LinkedHeading h=\"3\" id=\"overlay-trigger\">\n        OverlayTrigger\n      </LinkedHeading>\n      <p>\n        Since the above pattern is pretty common, but verbose, we've included{' '}\n        <code>{'<OverlayTrigger>'}</code> component to help with common\n        use-cases. It even has functionality to delayed show or hides, and a few\n        different \"trigger\" events you can mix and match.\n      </p>\n      <p>\n        Note that triggering components{' '}\n        <strong>\n          must be able to accept{' '}\n          <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">a ref</a>\n        </strong>{' '}\n        since <code>{'<OverlayTrigger>'}</code> will attempt to add one. You can\n        use{' '}\n        <a href=\"https://reactjs.org/docs/react-api.html#reactforwardref\">\n          forwardRef()\n        </a>{' '}\n        for stateless function components.\n      </p>\n\n      <ReactPlayground codeText={OverlayTrigger} />\n\n      <LinkedHeading h=\"2\" id=\"tooltips\">\n        Tooltips\n      </LinkedHeading>\n      <p className=\"lead\">\n        A tooltip component for a more stylish alternative to that anchor tag{' '}\n        <code>title</code> attribute.\n      </p>\n\n      <LinkedHeading h=\"3\" id=\"tooltip-examples\">\n        Examples\n      </LinkedHeading>\n\n      <p>Hover over the links below to see tooltips.</p>\n      <ReactPlayground codeText={TooltipInCopy} showCode={false} />\n\n      <p>\n        You can pass the <code>Overlay</code> injected props directly to the\n        Tooltip component.\n      </p>\n      <ReactPlayground codeText={TooltipOverlay} />\n\n      <p>\n        Or pass a Tooltip element to <code>OverlayTrigger</code> instead.\n      </p>\n      <ReactPlayground codeText={TooltipPositioned} />\n\n      <LinkedHeading h=\"2\" id=\"popovers\">\n        Popovers\n      </LinkedHeading>\n      <p className=\"lead\">A popover component, like those found in iOS.</p>\n\n      <LinkedHeading h=\"3\" id=\"popover-examples\">\n        Examples\n      </LinkedHeading>\n\n      <ReactPlayground codeText={PopoverBasic} />\n      <p>\n        As with <code>{'<Tooltip>'}</code>s, you can control the placement of\n        the Popover.\n      </p>\n      <ReactPlayground codeText={PopoverPositioned} />\n\n      <LinkedHeading h=\"2\" id=\"overlays-disabled\">\n        Disabled elements\n      </LinkedHeading>\n      <p>\n        Elements with the <code>disabled</code> attribute aren’t interactive,\n        meaning users cannot hover or click them to trigger a popover (or\n        tooltip). As a workaround, you’ll want to trigger the overlay from a\n        wrapper <code>{'<div>'}</code> or <code>{'<span>'}</code> and override\n        the <code>pointer-events</code> on the disabled element.\n      </p>\n      <ReactPlayground codeText={Disabled} />\n\n      <LinkedHeading h=\"2\" id=\"overlays-container\">\n        Changing containers\n      </LinkedHeading>\n      <p>\n        You can specify a <code>container</code> to control the DOM element the\n        overlay is appended to. This is especially useful when styles conflict\n        with your Overlay's.\n      </p>\n      <ReactPlayground\n        codeText={PopoverContained}\n        exampleClassName={styles.contained}\n      />\n\n      <LinkedHeading h=\"2\" id=\"overlays-dynamic-updates\">\n        Updating position dynamically\n      </LinkedHeading>\n      <p>\n        Since we can't know every time your overlay changes size, to reposition\n        it, you need to take manual action if you want to update the position of\n        an Overlay in response to a change.\n      </p>\n      <p>\n        For this, the Overlay component also injects a{' '}\n        <code>scheduleUpdate()</code> method that an overlay component can use\n        to reposition itself.\n      </p>\n      <ReactPlayground codeText={ScheduleUpdate} />\n\n      <LinkedHeading h=\"2\" id=\"overlays-api\">\n        API\n      </LinkedHeading>\n\n      <ComponentApi metadata={data.Overlay} />\n      <ComponentApi metadata={data.OverlayTrigger} />\n      <ComponentApi metadata={data.Tooltip} />\n      <ComponentApi metadata={data.Popover} />\n      <ComponentApi metadata={data.PopoverContent} />\n      <ComponentApi metadata={data.PopoverTitle} />\n    </>\n  );\n});\n\nexport const query = graphql`\n  query OverlayQuery {\n    Tooltip: componentMetadata(displayName: { eq: \"Tooltip\" }) {\n      ...ComponentApi_metadata\n    }\n    Popover: componentMetadata(displayName: { eq: \"Popover\" }) {\n      ...ComponentApi_metadata\n    }\n    PopoverContent: componentMetadata(displayName: { eq: \"PopoverContent\" }) {\n      ...ComponentApi_metadata\n    }\n    PopoverTitle: componentMetadata(displayName: { eq: \"PopoverTitle\" }) {\n      ...ComponentApi_metadata\n    }\n    Overlay: componentMetadata(displayName: { eq: \"Overlay\" }) {\n      ...ComponentApi_metadata\n    }\n    OverlayTrigger: componentMetadata(displayName: { eq: \"OverlayTrigger\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\n","module.exports = \"function Example() {\\n  const [show, setShow] = useState(false);\\n  const target = useRef(null);\\n\\n  return (\\n    <>\\n      <Button variant=\\\"danger\\\" ref={target} onClick={() => setShow(!show)}>\\n        Click me to see\\n      </Button>\\n      <Overlay target={target.current} show={show} placement=\\\"right\\\">\\n        {({\\n          placement,\\n          scheduleUpdate,\\n          arrowProps,\\n          outOfBoundaries,\\n          show: _show,\\n          ...props\\n        }) => (\\n          <div\\n            {...props}\\n            style={{\\n              backgroundColor: 'rgba(255, 100, 100, 0.85)',\\n              padding: '2px 10px',\\n              color: 'white',\\n              borderRadius: 3,\\n              ...props.style,\\n            }}\\n          >\\n            Simple tooltip\\n          </div>\\n        )}\\n      </Overlay>\\n    </>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"<OverlayTrigger overlay={<Tooltip id=\\\"tooltip-disabled\\\">Tooltip!</Tooltip>}>\\n  <span className=\\\"d-inline-block\\\">\\n    <Button disabled style={{ pointerEvents: 'none' }}>\\n      Disabled button\\n    </Button>\\n  </span>\\n</OverlayTrigger>;\\n\"","module.exports = \"const UpdatingPopover = React.forwardRef(\\n  ({ scheduleUpdate, children, ...props }, ref) => {\\n    useEffect(() => {\\n      console.log('updating!');\\n      scheduleUpdate();\\n    }, [children, scheduleUpdate]);\\n    return (\\n      <Popover ref={ref} {...props}>\\n        {children}\\n      </Popover>\\n    );\\n  },\\n);\\n\\nconst longContent = `\\n  Very long\\n  Multiline content\\n  that is engaging and what-not\\n`;\\nconst shortContent = 'Short and sweet!';\\n\\nfunction Example() {\\n  const [content, setContent] = useState(shortContent);\\n\\n  useEffect(() => {\\n    const timerId = setInterval(() => {\\n      setContent(content === shortContent ? longContent : shortContent);\\n    }, 3000);\\n\\n    return () => clearInterval(timerId);\\n  });\\n\\n  return (\\n    <OverlayTrigger\\n      trigger=\\\"click\\\"\\n      overlay={\\n        <UpdatingPopover id=\\\"popover-contained\\\">{content}</UpdatingPopover>\\n      }\\n    >\\n      <Button>Holy guacamole!</Button>\\n    </OverlayTrigger>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"const renderTooltip = props => (\\n  <div\\n    {...props}\\n    style={{\\n      backgroundColor: 'rgba(0, 0, 0, 0.85)',\\n      padding: '2px 10px',\\n      color: 'white',\\n      borderRadius: 3,\\n      ...props.style,\\n    }}\\n  >\\n    Simple tooltip\\n  </div>\\n);\\n\\nconst Example = () => (\\n  <OverlayTrigger\\n    placement=\\\"right-start\\\"\\n    delay={{ show: 250, hide: 400 }}\\n    overlay={renderTooltip}\\n  >\\n    <Button variant=\\\"success\\\">Hover me to see</Button>\\n  </OverlayTrigger>\\n);\\n\\nrender(<Example />);\\n\"","module.exports = \"const Link = ({ id, children, title }) => (\\n  <OverlayTrigger overlay={<Tooltip id={id}>{title}</Tooltip>}>\\n    <a href=\\\"#\\\">{children}</a>\\n  </OverlayTrigger>\\n);\\n\\nrender(\\n  <p>\\n    Tight pants next level keffiyeh{' '}\\n    <Link title=\\\"Default title\\\" id=\\\"t-1\\\">\\n      you probably\\n    </Link>{' '}\\n    haven't heard of them. Farm-to-table seitan, mcsweeney's fixie sustainable\\n    quinoa 8-bit american apparel{' '}\\n    <Link id=\\\"t-2\\\" title=\\\"Another one\\\">\\n      have a\\n    </Link>{' '}\\n    terry richardson vinyl chambray. Beard stumptown, cardigans banh mi lomo\\n    thundercats. Tofu biodiesel williamsburg marfa, four loko mcsweeney's\\n    cleanse vegan chambray. A really ironic artisan{' '}\\n    <Link title=\\\"Another one here too\\\" id=\\\"t-3\\\">\\n      whatever keytar\\n    </Link>\\n    , scenester farm-to-table banksy Austin{' '}\\n    <Link title=\\\"The last tip!\\\" id=\\\"t-4\\\">\\n      twitter handle\\n    </Link>{' '}\\n    freegan cred raw denim single-origin coffee viral.\\n  </p>,\\n);\\n\"","module.exports = \"function Example() {\\n  const [show, setShow] = useState(false);\\n  const target = useRef(null);\\n\\n  return (\\n    <>\\n      <Button ref={target} onClick={() => setShow(!show)}>\\n        Click me!\\n      </Button>\\n      <Overlay target={target.current} show={show} placement=\\\"right\\\">\\n        {props => (\\n          <Tooltip id=\\\"overlay-example\\\" {...props}>\\n            My Tooltip\\n          </Tooltip>\\n        )}\\n      </Overlay>\\n    </>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"<ButtonToolbar>\\n  {['top', 'right', 'bottom', 'left'].map(placement => (\\n    <OverlayTrigger\\n      key={placement}\\n      placement={placement}\\n      overlay={\\n        <Tooltip id={`tooltip-${placement}`}>\\n          Tooltip on <strong>{placement}</strong>.\\n        </Tooltip>\\n      }\\n    >\\n      <Button variant=\\\"secondary\\\">Tooltip on {placement}</Button>\\n    </OverlayTrigger>\\n  ))}\\n</ButtonToolbar>;\\n\"","module.exports = \"const popover = (\\n  <Popover id=\\\"popover-basic\\\">\\n    <Popover.Title as=\\\"h3\\\">Popover right</Popover.Title>\\n    <Popover.Content>\\n      And here's some <strong>amazing</strong> content. It's very engaging.\\n      right?\\n    </Popover.Content>\\n  </Popover>\\n);\\n\\nconst Example = () => (\\n  <OverlayTrigger trigger=\\\"click\\\" placement=\\\"right\\\" overlay={popover}>\\n    <Button variant=\\\"success\\\">Click me to see</Button>\\n  </OverlayTrigger>\\n);\\n\\nrender(<Example />);\\n\"","module.exports = \"function Example() {\\n  const [show, setShow] = useState(false);\\n  const [target, setTarget] = useState(null);\\n  const ref = useRef(null);\\n\\n  const handleClick = event => {\\n    setShow(!show);\\n    setTarget(event.target);\\n  };\\n\\n  return (\\n    <ButtonToolbar ref={ref}>\\n      <Button onClick={handleClick}>Holy guacamole!</Button>\\n\\n      <Overlay\\n        show={show}\\n        target={target}\\n        placement=\\\"bottom\\\"\\n        container={ref.current}\\n        containerPadding={20}\\n      >\\n        <Popover id=\\\"popover-contained\\\">\\n          <Popover.Title as=\\\"h3\\\">Popover bottom</Popover.Title>\\n          <Popover.Content>\\n            <strong>Holy guacamole!</strong> Check this info.\\n          </Popover.Content>\\n        </Popover>\\n      </Overlay>\\n    </ButtonToolbar>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"<ButtonToolbar>\\n  {['top', 'right', 'bottom', 'left'].map(placement => (\\n    <OverlayTrigger\\n      trigger=\\\"click\\\"\\n      key={placement}\\n      placement={placement}\\n      overlay={\\n        <Popover id={`popover-positioned-${placement}`}>\\n          <Popover.Title as=\\\"h3\\\">{`Popover ${placement}`}</Popover.Title>\\n          <Popover.Content>\\n            <strong>Holy guacamole!</strong> Check this info.\\n          </Popover.Content>\\n        </Popover>\\n      }\\n    >\\n      <Button variant=\\\"secondary\\\">Popover on {placement}</Button>\\n    </OverlayTrigger>\\n  ))}\\n</ButtonToolbar>;\\n\""],"sourceRoot":""}